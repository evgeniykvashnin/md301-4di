ARM GAS  /tmp/cc2ZHnxs.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"mbfuncdisc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.eMBFuncReadDiscreteInputs,"ax",%progbits
  16              		.align	1
  17              		.global	eMBFuncReadDiscreteInputs
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	eMBFuncReadDiscreteInputs:
  25              	.LVL0:
  26              	.LFB37:
  27              		.file 1 "modbus/functions/mbfuncdisc.c"
   1:modbus/functions/mbfuncdisc.c **** /* 
   2:modbus/functions/mbfuncdisc.c ****  * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3:modbus/functions/mbfuncdisc.c ****  * Copyright (c) 2006-2018 Christian Walter <cwalter@embedded-solutions.at>
   4:modbus/functions/mbfuncdisc.c ****  * All rights reserved.
   5:modbus/functions/mbfuncdisc.c ****  *
   6:modbus/functions/mbfuncdisc.c ****  * Redistribution and use in source and binary forms, with or without
   7:modbus/functions/mbfuncdisc.c ****  * modification, are permitted provided that the following conditions
   8:modbus/functions/mbfuncdisc.c ****  * are met:
   9:modbus/functions/mbfuncdisc.c ****  * 1. Redistributions of source code must retain the above copyright
  10:modbus/functions/mbfuncdisc.c ****  *    notice, this list of conditions and the following disclaimer.
  11:modbus/functions/mbfuncdisc.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:modbus/functions/mbfuncdisc.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:modbus/functions/mbfuncdisc.c ****  *    documentation and/or other materials provided with the distribution.
  14:modbus/functions/mbfuncdisc.c ****  * 3. The name of the author may not be used to endorse or promote products
  15:modbus/functions/mbfuncdisc.c ****  *    derived from this software without specific prior written permission.
  16:modbus/functions/mbfuncdisc.c ****  *
  17:modbus/functions/mbfuncdisc.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18:modbus/functions/mbfuncdisc.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19:modbus/functions/mbfuncdisc.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20:modbus/functions/mbfuncdisc.c ****  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:modbus/functions/mbfuncdisc.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22:modbus/functions/mbfuncdisc.c ****  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23:modbus/functions/mbfuncdisc.c ****  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24:modbus/functions/mbfuncdisc.c ****  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25:modbus/functions/mbfuncdisc.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26:modbus/functions/mbfuncdisc.c ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:modbus/functions/mbfuncdisc.c ****  *
  28:modbus/functions/mbfuncdisc.c ****  */
  29:modbus/functions/mbfuncdisc.c **** 
  30:modbus/functions/mbfuncdisc.c **** /* ----------------------- System includes ----------------------------------*/
  31:modbus/functions/mbfuncdisc.c **** #include "stdlib.h"
ARM GAS  /tmp/cc2ZHnxs.s 			page 2


  32:modbus/functions/mbfuncdisc.c **** #include "string.h"
  33:modbus/functions/mbfuncdisc.c **** 
  34:modbus/functions/mbfuncdisc.c **** /* ----------------------- Platform includes --------------------------------*/
  35:modbus/functions/mbfuncdisc.c **** #include "port.h"
  36:modbus/functions/mbfuncdisc.c **** 
  37:modbus/functions/mbfuncdisc.c **** /* ----------------------- Modbus includes ----------------------------------*/
  38:modbus/functions/mbfuncdisc.c **** #include "mb.h"
  39:modbus/functions/mbfuncdisc.c **** #include "mbframe.h"
  40:modbus/functions/mbfuncdisc.c **** #include "mbproto.h"
  41:modbus/functions/mbfuncdisc.c **** #include "mbconfig.h"
  42:modbus/functions/mbfuncdisc.c **** 
  43:modbus/functions/mbfuncdisc.c **** /* ----------------------- Defines ------------------------------------------*/
  44:modbus/functions/mbfuncdisc.c **** #define MB_PDU_FUNC_READ_ADDR_OFF           ( MB_PDU_DATA_OFF )
  45:modbus/functions/mbfuncdisc.c **** #define MB_PDU_FUNC_READ_DISCCNT_OFF        ( MB_PDU_DATA_OFF + 2 )
  46:modbus/functions/mbfuncdisc.c **** #define MB_PDU_FUNC_READ_SIZE               ( 4 )
  47:modbus/functions/mbfuncdisc.c **** #define MB_PDU_FUNC_READ_DISCCNT_MAX        ( 0x07D0 )
  48:modbus/functions/mbfuncdisc.c **** 
  49:modbus/functions/mbfuncdisc.c **** /* ----------------------- Static functions ---------------------------------*/
  50:modbus/functions/mbfuncdisc.c **** eMBException    prveMBError2Exception( eMBErrorCode eErrorCode );
  51:modbus/functions/mbfuncdisc.c **** 
  52:modbus/functions/mbfuncdisc.c **** /* ----------------------- Start implementation -----------------------------*/
  53:modbus/functions/mbfuncdisc.c **** 
  54:modbus/functions/mbfuncdisc.c **** #if MB_FUNC_READ_COILS_ENABLED > 0
  55:modbus/functions/mbfuncdisc.c **** 
  56:modbus/functions/mbfuncdisc.c **** eMBException
  57:modbus/functions/mbfuncdisc.c **** eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
  58:modbus/functions/mbfuncdisc.c **** {
  28              		.loc 1 58 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 58 1 is_stmt 0 view .LVU1
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 0C00     		movs	r4, r1
  59:modbus/functions/mbfuncdisc.c ****     USHORT          usRegAddress;
  41              		.loc 1 59 5 is_stmt 1 view .LVU2
  60:modbus/functions/mbfuncdisc.c ****     USHORT          usDiscreteCnt;
  42              		.loc 1 60 5 view .LVU3
  61:modbus/functions/mbfuncdisc.c ****     UCHAR           ucNBytes;
  43              		.loc 1 61 5 view .LVU4
  62:modbus/functions/mbfuncdisc.c ****     UCHAR          *pucFrameCur;
  44              		.loc 1 62 5 view .LVU5
  63:modbus/functions/mbfuncdisc.c **** 
  64:modbus/functions/mbfuncdisc.c ****     eMBException    eStatus = MB_EX_NONE;
  45              		.loc 1 64 5 view .LVU6
  46              	.LVL1:
  65:modbus/functions/mbfuncdisc.c ****     eMBErrorCode    eRegStatus;
  47              		.loc 1 65 5 view .LVU7
  66:modbus/functions/mbfuncdisc.c **** 
  67:modbus/functions/mbfuncdisc.c ****     if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
  48              		.loc 1 67 5 view .LVU8
ARM GAS  /tmp/cc2ZHnxs.s 			page 3


  49              		.loc 1 67 9 is_stmt 0 view .LVU9
  50 0004 0B88     		ldrh	r3, [r1]
  51              		.loc 1 67 7 view .LVU10
  52 0006 052B     		cmp	r3, #5
  53 0008 01D0     		beq	.L8
  68:modbus/functions/mbfuncdisc.c ****     {
  69:modbus/functions/mbfuncdisc.c ****         usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
  70:modbus/functions/mbfuncdisc.c ****         usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
  71:modbus/functions/mbfuncdisc.c ****         usRegAddress++;
  72:modbus/functions/mbfuncdisc.c **** 
  73:modbus/functions/mbfuncdisc.c ****         usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
  74:modbus/functions/mbfuncdisc.c ****         usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
  75:modbus/functions/mbfuncdisc.c **** 
  76:modbus/functions/mbfuncdisc.c ****         /* Check if the number of registers to read is valid. If not
  77:modbus/functions/mbfuncdisc.c ****          * return Modbus illegal data value exception. 
  78:modbus/functions/mbfuncdisc.c ****          */
  79:modbus/functions/mbfuncdisc.c ****         if( ( usDiscreteCnt >= 1 ) &&
  80:modbus/functions/mbfuncdisc.c ****             ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
  81:modbus/functions/mbfuncdisc.c ****         {
  82:modbus/functions/mbfuncdisc.c ****             /* Set the current PDU data pointer to the beginning. */
  83:modbus/functions/mbfuncdisc.c ****             pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
  84:modbus/functions/mbfuncdisc.c ****             *usLen = MB_PDU_FUNC_OFF;
  85:modbus/functions/mbfuncdisc.c **** 
  86:modbus/functions/mbfuncdisc.c ****             /* First byte contains the function code. */
  87:modbus/functions/mbfuncdisc.c ****             *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
  88:modbus/functions/mbfuncdisc.c ****             *usLen += 1;
  89:modbus/functions/mbfuncdisc.c **** 
  90:modbus/functions/mbfuncdisc.c ****             /* Test if the quantity of coils is a multiple of 8. If not last
  91:modbus/functions/mbfuncdisc.c ****              * byte is only partially field with unused coils set to zero. */
  92:modbus/functions/mbfuncdisc.c ****             if( ( usDiscreteCnt & 0x0007 ) != 0 )
  93:modbus/functions/mbfuncdisc.c ****             {
  94:modbus/functions/mbfuncdisc.c ****                 ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
  95:modbus/functions/mbfuncdisc.c ****             }
  96:modbus/functions/mbfuncdisc.c ****             else
  97:modbus/functions/mbfuncdisc.c ****             {
  98:modbus/functions/mbfuncdisc.c ****                 ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
  99:modbus/functions/mbfuncdisc.c ****             }
 100:modbus/functions/mbfuncdisc.c ****             *pucFrameCur++ = ucNBytes;
 101:modbus/functions/mbfuncdisc.c ****             *usLen += 1;
 102:modbus/functions/mbfuncdisc.c **** 
 103:modbus/functions/mbfuncdisc.c ****             eRegStatus =
 104:modbus/functions/mbfuncdisc.c ****                 eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 105:modbus/functions/mbfuncdisc.c **** 
 106:modbus/functions/mbfuncdisc.c ****             /* If an error occured convert it into a Modbus exception. */
 107:modbus/functions/mbfuncdisc.c ****             if( eRegStatus != MB_ENOERR )
 108:modbus/functions/mbfuncdisc.c ****             {
 109:modbus/functions/mbfuncdisc.c ****                 eStatus = prveMBError2Exception( eRegStatus );
 110:modbus/functions/mbfuncdisc.c ****             }
 111:modbus/functions/mbfuncdisc.c ****             else
 112:modbus/functions/mbfuncdisc.c ****             {
 113:modbus/functions/mbfuncdisc.c ****                 /* The response contains the function code, the starting address
 114:modbus/functions/mbfuncdisc.c ****                  * and the quantity of registers. We reuse the old values in the 
 115:modbus/functions/mbfuncdisc.c ****                  * buffer because they are still valid. */
 116:modbus/functions/mbfuncdisc.c ****                 *usLen += ucNBytes;;
 117:modbus/functions/mbfuncdisc.c ****             }
 118:modbus/functions/mbfuncdisc.c ****         }
 119:modbus/functions/mbfuncdisc.c ****         else
ARM GAS  /tmp/cc2ZHnxs.s 			page 4


 120:modbus/functions/mbfuncdisc.c ****         {
 121:modbus/functions/mbfuncdisc.c ****             eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 122:modbus/functions/mbfuncdisc.c ****         }
 123:modbus/functions/mbfuncdisc.c ****     }
 124:modbus/functions/mbfuncdisc.c ****     else
 125:modbus/functions/mbfuncdisc.c ****     {
 126:modbus/functions/mbfuncdisc.c ****         /* Can't be a valid read coil register request because the length
 127:modbus/functions/mbfuncdisc.c ****          * is incorrect. */
 128:modbus/functions/mbfuncdisc.c ****         eStatus = MB_EX_ILLEGAL_DATA_VALUE;
  54              		.loc 1 128 17 view .LVU11
  55 000a 0320     		movs	r0, #3
  56              	.LVL2:
  57              	.L2:
 129:modbus/functions/mbfuncdisc.c ****     }
 130:modbus/functions/mbfuncdisc.c ****     return eStatus;
  58              		.loc 1 130 5 is_stmt 1 view .LVU12
 131:modbus/functions/mbfuncdisc.c **** }
  59              		.loc 1 131 1 is_stmt 0 view .LVU13
  60              		@ sp needed
  61              	.LVL3:
  62              		.loc 1 131 1 view .LVU14
  63 000c 70BD     		pop	{r4, r5, r6, pc}
  64              	.LVL4:
  65              	.L8:
  69:modbus/functions/mbfuncdisc.c ****         usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
  66              		.loc 1 69 9 is_stmt 1 view .LVU15
  69:modbus/functions/mbfuncdisc.c ****         usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
  67              		.loc 1 69 44 is_stmt 0 view .LVU16
  68 000e 4378     		ldrb	r3, [r0, #1]
  69:modbus/functions/mbfuncdisc.c ****         usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
  69              		.loc 1 69 22 view .LVU17
  70 0010 1B02     		lsls	r3, r3, #8
  71              	.LVL5:
  70:modbus/functions/mbfuncdisc.c ****         usRegAddress++;
  72              		.loc 1 70 9 is_stmt 1 view .LVU18
  70:modbus/functions/mbfuncdisc.c ****         usRegAddress++;
  73              		.loc 1 70 45 is_stmt 0 view .LVU19
  74 0012 8178     		ldrb	r1, [r0, #2]
  75              	.LVL6:
  70:modbus/functions/mbfuncdisc.c ****         usRegAddress++;
  76              		.loc 1 70 22 view .LVU20
  77 0014 1943     		orrs	r1, r3
  78              	.LVL7:
  71:modbus/functions/mbfuncdisc.c **** 
  79              		.loc 1 71 9 is_stmt 1 view .LVU21
  71:modbus/functions/mbfuncdisc.c **** 
  80              		.loc 1 71 21 is_stmt 0 view .LVU22
  81 0016 0131     		adds	r1, r1, #1
  82              	.LVL8:
  71:modbus/functions/mbfuncdisc.c **** 
  83              		.loc 1 71 21 view .LVU23
  84 0018 89B2     		uxth	r1, r1
  85              	.LVL9:
  73:modbus/functions/mbfuncdisc.c ****         usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
  86              		.loc 1 73 9 is_stmt 1 view .LVU24
  73:modbus/functions/mbfuncdisc.c ****         usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
  87              		.loc 1 73 45 is_stmt 0 view .LVU25
ARM GAS  /tmp/cc2ZHnxs.s 			page 5


  88 001a C278     		ldrb	r2, [r0, #3]
  73:modbus/functions/mbfuncdisc.c ****         usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
  89              		.loc 1 73 23 view .LVU26
  90 001c 1202     		lsls	r2, r2, #8
  91              	.LVL10:
  74:modbus/functions/mbfuncdisc.c **** 
  92              		.loc 1 74 9 is_stmt 1 view .LVU27
  74:modbus/functions/mbfuncdisc.c **** 
  93              		.loc 1 74 46 is_stmt 0 view .LVU28
  94 001e 0379     		ldrb	r3, [r0, #4]
  74:modbus/functions/mbfuncdisc.c **** 
  95              		.loc 1 74 23 view .LVU29
  96 0020 1A43     		orrs	r2, r3
  97              	.LVL11:
  79:modbus/functions/mbfuncdisc.c ****             ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
  98              		.loc 1 79 9 is_stmt 1 view .LVU30
  79:modbus/functions/mbfuncdisc.c ****             ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
  99              		.loc 1 79 36 is_stmt 0 view .LVU31
 100 0022 531E     		subs	r3, r2, #1
 101 0024 9BB2     		uxth	r3, r3
  79:modbus/functions/mbfuncdisc.c ****             ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
 102              		.loc 1 79 11 view .LVU32
 103 0026 134D     		ldr	r5, .L10
 104 0028 AB42     		cmp	r3, r5
 105 002a 21D8     		bhi	.L7
  83:modbus/functions/mbfuncdisc.c ****             *usLen = MB_PDU_FUNC_OFF;
 106              		.loc 1 83 13 is_stmt 1 view .LVU33
 107              	.LVL12:
  84:modbus/functions/mbfuncdisc.c **** 
 108              		.loc 1 84 13 view .LVU34
  84:modbus/functions/mbfuncdisc.c **** 
 109              		.loc 1 84 20 is_stmt 0 view .LVU35
 110 002c 0023     		movs	r3, #0
 111 002e 2380     		strh	r3, [r4]
  87:modbus/functions/mbfuncdisc.c ****             *usLen += 1;
 112              		.loc 1 87 13 is_stmt 1 view .LVU36
 113              	.LVL13:
  87:modbus/functions/mbfuncdisc.c ****             *usLen += 1;
 114              		.loc 1 87 28 is_stmt 0 view .LVU37
 115 0030 0233     		adds	r3, r3, #2
 116 0032 0370     		strb	r3, [r0]
  88:modbus/functions/mbfuncdisc.c **** 
 117              		.loc 1 88 13 is_stmt 1 view .LVU38
  88:modbus/functions/mbfuncdisc.c **** 
 118              		.loc 1 88 20 is_stmt 0 view .LVU39
 119 0034 2388     		ldrh	r3, [r4]
 120 0036 0133     		adds	r3, r3, #1
 121 0038 2380     		strh	r3, [r4]
  92:modbus/functions/mbfuncdisc.c ****             {
 122              		.loc 1 92 13 is_stmt 1 view .LVU40
  92:modbus/functions/mbfuncdisc.c ****             {
 123              		.loc 1 92 15 is_stmt 0 view .LVU41
 124 003a 5307     		lsls	r3, r2, #29
 125 003c 12D0     		beq	.L3
  94:modbus/functions/mbfuncdisc.c ****             }
 126              		.loc 1 94 17 is_stmt 1 view .LVU42
  94:modbus/functions/mbfuncdisc.c ****             }
ARM GAS  /tmp/cc2ZHnxs.s 			page 6


 127              		.loc 1 94 28 is_stmt 0 view .LVU43
 128 003e D508     		lsrs	r5, r2, #3
 129 0040 EDB2     		uxtb	r5, r5
  94:modbus/functions/mbfuncdisc.c ****             }
 130              		.loc 1 94 26 view .LVU44
 131 0042 0135     		adds	r5, r5, #1
 132 0044 EDB2     		uxtb	r5, r5
 133              	.LVL14:
 134              	.L4:
 100:modbus/functions/mbfuncdisc.c ****             *usLen += 1;
 135              		.loc 1 100 13 is_stmt 1 view .LVU45
 100:modbus/functions/mbfuncdisc.c ****             *usLen += 1;
 136              		.loc 1 100 25 is_stmt 0 view .LVU46
 137 0046 861C     		adds	r6, r0, #2
 138              	.LVL15:
 100:modbus/functions/mbfuncdisc.c ****             *usLen += 1;
 139              		.loc 1 100 28 view .LVU47
 140 0048 4570     		strb	r5, [r0, #1]
 101:modbus/functions/mbfuncdisc.c **** 
 141              		.loc 1 101 13 is_stmt 1 view .LVU48
 101:modbus/functions/mbfuncdisc.c **** 
 142              		.loc 1 101 20 is_stmt 0 view .LVU49
 143 004a 2388     		ldrh	r3, [r4]
 144 004c 0133     		adds	r3, r3, #1
 145 004e 2380     		strh	r3, [r4]
 103:modbus/functions/mbfuncdisc.c ****                 eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 146              		.loc 1 103 13 is_stmt 1 view .LVU50
 104:modbus/functions/mbfuncdisc.c **** 
 147              		.loc 1 104 17 is_stmt 0 view .LVU51
 148 0050 3000     		movs	r0, r6
 149              	.LVL16:
 104:modbus/functions/mbfuncdisc.c **** 
 150              		.loc 1 104 17 view .LVU52
 151 0052 FFF7FEFF 		bl	eMBRegDiscreteCB
 152              	.LVL17:
 107:modbus/functions/mbfuncdisc.c ****             {
 153              		.loc 1 107 13 is_stmt 1 view .LVU53
 107:modbus/functions/mbfuncdisc.c ****             {
 154              		.loc 1 107 15 is_stmt 0 view .LVU54
 155 0056 0028     		cmp	r0, #0
 156 0058 07D1     		bne	.L9
 116:modbus/functions/mbfuncdisc.c ****             }
 157              		.loc 1 116 17 is_stmt 1 view .LVU55
 116:modbus/functions/mbfuncdisc.c ****             }
 158              		.loc 1 116 24 is_stmt 0 view .LVU56
 159 005a 2388     		ldrh	r3, [r4]
 160 005c 5D19     		adds	r5, r3, r5
 161              	.LVL18:
 116:modbus/functions/mbfuncdisc.c ****             }
 162              		.loc 1 116 24 view .LVU57
 163 005e 2580     		strh	r5, [r4]
  64:modbus/functions/mbfuncdisc.c ****     eMBErrorCode    eRegStatus;
 164              		.loc 1 64 21 view .LVU58
 165 0060 0020     		movs	r0, #0
 166              	.LVL19:
  64:modbus/functions/mbfuncdisc.c ****     eMBErrorCode    eRegStatus;
 167              		.loc 1 64 21 view .LVU59
ARM GAS  /tmp/cc2ZHnxs.s 			page 7


 168 0062 D3E7     		b	.L2
 169              	.LVL20:
 170              	.L3:
  98:modbus/functions/mbfuncdisc.c ****             }
 171              		.loc 1 98 17 is_stmt 1 view .LVU60
  98:modbus/functions/mbfuncdisc.c ****             }
 172              		.loc 1 98 28 is_stmt 0 view .LVU61
 173 0064 D508     		lsrs	r5, r2, #3
  98:modbus/functions/mbfuncdisc.c ****             }
 174              		.loc 1 98 26 view .LVU62
 175 0066 EDB2     		uxtb	r5, r5
 176              	.LVL21:
  98:modbus/functions/mbfuncdisc.c ****             }
 177              		.loc 1 98 26 view .LVU63
 178 0068 EDE7     		b	.L4
 179              	.LVL22:
 180              	.L9:
 109:modbus/functions/mbfuncdisc.c ****             }
 181              		.loc 1 109 17 is_stmt 1 view .LVU64
 109:modbus/functions/mbfuncdisc.c ****             }
 182              		.loc 1 109 27 is_stmt 0 view .LVU65
 183 006a FFF7FEFF 		bl	prveMBError2Exception
 184              	.LVL23:
 109:modbus/functions/mbfuncdisc.c ****             }
 185              		.loc 1 109 27 view .LVU66
 186 006e CDE7     		b	.L2
 187              	.LVL24:
 188              	.L7:
 121:modbus/functions/mbfuncdisc.c ****         }
 189              		.loc 1 121 21 view .LVU67
 190 0070 0320     		movs	r0, #3
 191              	.LVL25:
 121:modbus/functions/mbfuncdisc.c ****         }
 192              		.loc 1 121 21 view .LVU68
 193 0072 CBE7     		b	.L2
 194              	.L11:
 195              		.align	2
 196              	.L10:
 197 0074 CE070000 		.word	1998
 198              		.cfi_endproc
 199              	.LFE37:
 201              		.text
 202              	.Letext0:
 203              		.file 2 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/machine/_default_types.h"
 204              		.file 3 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/lock.h"
 205              		.file 4 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_types.h"
 206              		.file 5 "/opt/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi/8.2.1/include/stddef.h"
 207              		.file 6 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/reent.h"
 208              		.file 7 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/stdlib.h"
 209              		.file 8 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_stdint.h"
 210              		.file 9 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 211              		.file 10 "modbus/port/port.h"
 212              		.file 11 "modbus/include/mbport.h"
 213              		.file 12 "modbus/include/mbproto.h"
 214              		.file 13 "modbus/include/mb.h"
ARM GAS  /tmp/cc2ZHnxs.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mbfuncdisc.c
     /tmp/cc2ZHnxs.s:16     .text.eMBFuncReadDiscreteInputs:0000000000000000 $t
     /tmp/cc2ZHnxs.s:24     .text.eMBFuncReadDiscreteInputs:0000000000000000 eMBFuncReadDiscreteInputs
     /tmp/cc2ZHnxs.s:197    .text.eMBFuncReadDiscreteInputs:0000000000000074 $d

UNDEFINED SYMBOLS
eMBRegDiscreteCB
prveMBError2Exception
