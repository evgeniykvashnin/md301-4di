ARM GAS  /tmp/cc4Xjg7U.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"mbutils.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.xMBUtilSetBits,"ax",%progbits
  16              		.align	1
  17              		.global	xMBUtilSetBits
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	xMBUtilSetBits:
  25              	.LVL0:
  26              	.LFB37:
  27              		.file 1 "modbus/functions/mbutils.c"
   1:modbus/functions/mbutils.c **** /* 
   2:modbus/functions/mbutils.c ****  * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3:modbus/functions/mbutils.c ****  * Copyright (c) 2006-2018 Christian Walter <cwalter@embedded-solutions.at>
   4:modbus/functions/mbutils.c ****  * All rights reserved.
   5:modbus/functions/mbutils.c ****  *
   6:modbus/functions/mbutils.c ****  * Redistribution and use in source and binary forms, with or without
   7:modbus/functions/mbutils.c ****  * modification, are permitted provided that the following conditions
   8:modbus/functions/mbutils.c ****  * are met:
   9:modbus/functions/mbutils.c ****  * 1. Redistributions of source code must retain the above copyright
  10:modbus/functions/mbutils.c ****  *    notice, this list of conditions and the following disclaimer.
  11:modbus/functions/mbutils.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:modbus/functions/mbutils.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:modbus/functions/mbutils.c ****  *    documentation and/or other materials provided with the distribution.
  14:modbus/functions/mbutils.c ****  * 3. The name of the author may not be used to endorse or promote products
  15:modbus/functions/mbutils.c ****  *    derived from this software without specific prior written permission.
  16:modbus/functions/mbutils.c ****  *
  17:modbus/functions/mbutils.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18:modbus/functions/mbutils.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19:modbus/functions/mbutils.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20:modbus/functions/mbutils.c ****  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:modbus/functions/mbutils.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22:modbus/functions/mbutils.c ****  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23:modbus/functions/mbutils.c ****  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24:modbus/functions/mbutils.c ****  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25:modbus/functions/mbutils.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26:modbus/functions/mbutils.c ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:modbus/functions/mbutils.c ****  *
  28:modbus/functions/mbutils.c ****  */
  29:modbus/functions/mbutils.c **** 
  30:modbus/functions/mbutils.c **** /* ----------------------- System includes ----------------------------------*/
  31:modbus/functions/mbutils.c **** #include "stdlib.h"
ARM GAS  /tmp/cc4Xjg7U.s 			page 2


  32:modbus/functions/mbutils.c **** #include "string.h"
  33:modbus/functions/mbutils.c **** 
  34:modbus/functions/mbutils.c **** /* ----------------------- Platform includes --------------------------------*/
  35:modbus/functions/mbutils.c **** #include "port.h"
  36:modbus/functions/mbutils.c **** 
  37:modbus/functions/mbutils.c **** /* ----------------------- Modbus includes ----------------------------------*/
  38:modbus/functions/mbutils.c **** #include "mb.h"
  39:modbus/functions/mbutils.c **** #include "mbproto.h"
  40:modbus/functions/mbutils.c **** 
  41:modbus/functions/mbutils.c **** /* ----------------------- Defines ------------------------------------------*/
  42:modbus/functions/mbutils.c **** #define BITS_UCHAR      8U
  43:modbus/functions/mbutils.c **** 
  44:modbus/functions/mbutils.c **** /* ----------------------- Start implementation -----------------------------*/
  45:modbus/functions/mbutils.c **** void
  46:modbus/functions/mbutils.c **** xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
  47:modbus/functions/mbutils.c ****                 UCHAR ucValue )
  48:modbus/functions/mbutils.c **** {
  28              		.loc 1 48 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 48 1 is_stmt 0 view .LVU1
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  49:modbus/functions/mbutils.c ****     USHORT          usWordBuf;
  40              		.loc 1 49 5 is_stmt 1 view .LVU2
  50:modbus/functions/mbutils.c ****     USHORT          usMask;
  41              		.loc 1 50 5 view .LVU3
  51:modbus/functions/mbutils.c ****     USHORT          usByteOffset;
  42              		.loc 1 51 5 view .LVU4
  52:modbus/functions/mbutils.c ****     USHORT          usNPreBits;
  43              		.loc 1 52 5 view .LVU5
  53:modbus/functions/mbutils.c ****     USHORT          usValue = ucValue;
  44              		.loc 1 53 5 view .LVU6
  45              	.LVL1:
  54:modbus/functions/mbutils.c **** 
  55:modbus/functions/mbutils.c ****     assert( ucNBits <= 8 );
  46              		.loc 1 55 5 view .LVU7
  47 0002 082A     		cmp	r2, #8
  48 0004 1DD8     		bhi	.L3
  56:modbus/functions/mbutils.c ****     assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );
  49              		.loc 1 56 5 view .LVU8
  57:modbus/functions/mbutils.c **** 
  58:modbus/functions/mbutils.c ****     /* Calculate byte offset for first byte containing the bit values starting
  59:modbus/functions/mbutils.c ****      * at usBitOffset. */
  60:modbus/functions/mbutils.c ****     usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
  50              		.loc 1 60 5 view .LVU9
  51              		.loc 1 60 18 is_stmt 0 view .LVU10
  52 0006 CE08     		lsrs	r6, r1, #3
  53              	.LVL2:
  61:modbus/functions/mbutils.c **** 
  62:modbus/functions/mbutils.c ****     /* How many bits precede our bits to set. */
ARM GAS  /tmp/cc4Xjg7U.s 			page 3


  63:modbus/functions/mbutils.c ****     usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
  54              		.loc 1 63 5 is_stmt 1 view .LVU11
  64:modbus/functions/mbutils.c **** 
  65:modbus/functions/mbutils.c ****     /* Move bit field into position over bits to set */
  66:modbus/functions/mbutils.c ****     usValue <<= usNPreBits;
  55              		.loc 1 66 5 view .LVU12
  56              		.loc 1 66 13 is_stmt 0 view .LVU13
  57 0008 0724     		movs	r4, #7
  58 000a 0C40     		ands	r4, r1
  59 000c A340     		lsls	r3, r3, r4
  60              	.LVL3:
  61              		.loc 1 66 13 view .LVU14
  62 000e 1D00     		movs	r5, r3
  63              	.LVL4:
  67:modbus/functions/mbutils.c **** 
  68:modbus/functions/mbutils.c ****     /* Prepare a mask for setting the new bits. */
  69:modbus/functions/mbutils.c ****     usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
  64              		.loc 1 69 5 is_stmt 1 view .LVU15
  65              		.loc 1 69 30 is_stmt 0 view .LVU16
  66 0010 0124     		movs	r4, #1
  67 0012 9440     		lsls	r4, r4, r2
  68              		.loc 1 69 14 view .LVU17
  69 0014 A4B2     		uxth	r4, r4
  70              		.loc 1 69 12 view .LVU18
  71 0016 013C     		subs	r4, r4, #1
  72 0018 A4B2     		uxth	r4, r4
  73              	.LVL5:
  70:modbus/functions/mbutils.c ****     usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
  74              		.loc 1 70 5 is_stmt 1 view .LVU19
  75              		.loc 1 70 43 is_stmt 0 view .LVU20
  76 001a F300     		lsls	r3, r6, #3
  77              		.loc 1 70 28 view .LVU21
  78 001c C91A     		subs	r1, r1, r3
  79              	.LVL6:
  80              		.loc 1 70 12 view .LVU22
  81 001e 8C40     		lsls	r4, r4, r1
  82              	.LVL7:
  71:modbus/functions/mbutils.c **** 
  72:modbus/functions/mbutils.c ****     /* copy bits into temporary storage. */
  73:modbus/functions/mbutils.c ****     usWordBuf = ucByteBuf[usByteOffset];
  83              		.loc 1 73 5 is_stmt 1 view .LVU23
  84              		.loc 1 73 26 is_stmt 0 view .LVU24
  85 0020 8119     		adds	r1, r0, r6
  86 0022 0B78     		ldrb	r3, [r1]
  87              	.LVL8:
  74:modbus/functions/mbutils.c ****     usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
  88              		.loc 1 74 5 is_stmt 1 view .LVU25
  89              		.loc 1 74 27 is_stmt 0 view .LVU26
  90 0024 0136     		adds	r6, r6, #1
  91              	.LVL9:
  92              		.loc 1 74 27 view .LVU27
  93 0026 8019     		adds	r0, r0, r6
  94              	.LVL10:
  95              		.loc 1 74 27 view .LVU28
  96 0028 0278     		ldrb	r2, [r0]
  97              	.LVL11:
  98              		.loc 1 74 46 view .LVU29
ARM GAS  /tmp/cc4Xjg7U.s 			page 4


  99 002a 1202     		lsls	r2, r2, #8
 100              		.loc 1 74 15 view .LVU30
 101 002c 1A43     		orrs	r2, r3
 102 002e 12B2     		sxth	r2, r2
 103              	.LVL12:
  75:modbus/functions/mbutils.c **** 
  76:modbus/functions/mbutils.c ****     /* Zero out bit field bits and then or value bits into them. */
  77:modbus/functions/mbutils.c ****     usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 104              		.loc 1 77 5 is_stmt 1 view .LVU31
 105              		.loc 1 77 41 is_stmt 0 view .LVU32
 106 0030 A243     		bics	r2, r4
 107              	.LVL13:
 108              		.loc 1 77 41 view .LVU33
 109 0032 13B2     		sxth	r3, r2
 110              	.LVL14:
 111              		.loc 1 77 57 view .LVU34
 112 0034 2B43     		orrs	r3, r5
 113 0036 1BB2     		sxth	r3, r3
 114              		.loc 1 77 15 view .LVU35
 115 0038 9AB2     		uxth	r2, r3
 116              	.LVL15:
  78:modbus/functions/mbutils.c **** 
  79:modbus/functions/mbutils.c ****     /* move bits back into storage */
  80:modbus/functions/mbutils.c ****     ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 117              		.loc 1 80 5 is_stmt 1 view .LVU36
 118              		.loc 1 80 29 is_stmt 0 view .LVU37
 119 003a 0B70     		strb	r3, [r1]
  81:modbus/functions/mbutils.c ****     ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 120              		.loc 1 81 5 is_stmt 1 view .LVU38
 121              		.loc 1 81 35 is_stmt 0 view .LVU39
 122 003c 120A     		lsrs	r2, r2, #8
 123              	.LVL16:
 124              		.loc 1 81 33 view .LVU40
 125 003e 0270     		strb	r2, [r0]
  82:modbus/functions/mbutils.c **** }
 126              		.loc 1 82 1 view .LVU41
 127              		@ sp needed
 128              	.LVL17:
 129              	.LVL18:
 130              	.LVL19:
 131              		.loc 1 82 1 view .LVU42
 132 0040 70BD     		pop	{r4, r5, r6, pc}
 133              	.LVL20:
 134              	.L3:
  55:modbus/functions/mbutils.c ****     assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );
 135              		.loc 1 55 5 discriminator 1 view .LVU43
 136 0042 034B     		ldr	r3, .L4
 137              	.LVL21:
  55:modbus/functions/mbutils.c ****     assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );
 138              		.loc 1 55 5 discriminator 1 view .LVU44
 139 0044 034A     		ldr	r2, .L4+4
 140              	.LVL22:
  55:modbus/functions/mbutils.c ****     assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );
 141              		.loc 1 55 5 discriminator 1 view .LVU45
 142 0046 3721     		movs	r1, #55
 143              	.LVL23:
  55:modbus/functions/mbutils.c ****     assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );
ARM GAS  /tmp/cc4Xjg7U.s 			page 5


 144              		.loc 1 55 5 discriminator 1 view .LVU46
 145 0048 0348     		ldr	r0, .L4+8
 146              	.LVL24:
  55:modbus/functions/mbutils.c ****     assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );
 147              		.loc 1 55 5 discriminator 1 view .LVU47
 148 004a FFF7FEFF 		bl	__assert_func
 149              	.LVL25:
 150              	.L5:
 151 004e C046     		.align	2
 152              	.L4:
 153 0050 00000000 		.word	.LC0
 154 0054 00000000 		.word	.LANCHOR0
 155 0058 10000000 		.word	.LC3
 156              		.cfi_endproc
 157              	.LFE37:
 159              		.section	.text.xMBUtilGetBits,"ax",%progbits
 160              		.align	1
 161              		.global	xMBUtilGetBits
 162              		.syntax unified
 163              		.code	16
 164              		.thumb_func
 165              		.fpu softvfp
 167              	xMBUtilGetBits:
 168              	.LVL26:
 169              	.LFB38:
  83:modbus/functions/mbutils.c **** 
  84:modbus/functions/mbutils.c **** UCHAR
  85:modbus/functions/mbutils.c **** xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
  86:modbus/functions/mbutils.c **** {
 170              		.loc 1 86 1 is_stmt 1 view -0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		.loc 1 86 1 is_stmt 0 view .LVU49
 175 0000 10B5     		push	{r4, lr}
 176              	.LCFI1:
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 4, -8
 179              		.cfi_offset 14, -4
  87:modbus/functions/mbutils.c ****     USHORT          usWordBuf;
 180              		.loc 1 87 5 is_stmt 1 view .LVU50
  88:modbus/functions/mbutils.c ****     USHORT          usMask;
 181              		.loc 1 88 5 view .LVU51
  89:modbus/functions/mbutils.c ****     USHORT          usByteOffset;
 182              		.loc 1 89 5 view .LVU52
  90:modbus/functions/mbutils.c ****     USHORT          usNPreBits;
 183              		.loc 1 90 5 view .LVU53
  91:modbus/functions/mbutils.c **** 
  92:modbus/functions/mbutils.c ****     /* Calculate byte offset for first byte containing the bit values starting
  93:modbus/functions/mbutils.c ****      * at usBitOffset. */
  94:modbus/functions/mbutils.c ****     usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 184              		.loc 1 94 5 view .LVU54
 185              		.loc 1 94 18 is_stmt 0 view .LVU55
 186 0002 CC08     		lsrs	r4, r1, #3
 187              	.LVL27:
  95:modbus/functions/mbutils.c **** 
  96:modbus/functions/mbutils.c ****     /* How many bits precede our bits to set. */
ARM GAS  /tmp/cc4Xjg7U.s 			page 6


  97:modbus/functions/mbutils.c ****     usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 188              		.loc 1 97 5 is_stmt 1 view .LVU56
  98:modbus/functions/mbutils.c **** 
  99:modbus/functions/mbutils.c ****     /* Prepare a mask for setting the new bits. */
 100:modbus/functions/mbutils.c ****     usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 189              		.loc 1 100 5 view .LVU57
 190              		.loc 1 100 30 is_stmt 0 view .LVU58
 191 0004 0123     		movs	r3, #1
 192 0006 9340     		lsls	r3, r3, r2
 193              		.loc 1 100 14 view .LVU59
 194 0008 9BB2     		uxth	r3, r3
 195              		.loc 1 100 12 view .LVU60
 196 000a 013B     		subs	r3, r3, #1
 197              	.LVL28:
 101:modbus/functions/mbutils.c **** 
 102:modbus/functions/mbutils.c ****     /* copy bits into temporary storage. */
 103:modbus/functions/mbutils.c ****     usWordBuf = ucByteBuf[usByteOffset];
 198              		.loc 1 103 5 is_stmt 1 view .LVU61
 199              		.loc 1 103 26 is_stmt 0 view .LVU62
 200 000c 025D     		ldrb	r2, [r0, r4]
 201              	.LVL29:
 104:modbus/functions/mbutils.c ****     usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 202              		.loc 1 104 5 is_stmt 1 view .LVU63
 203              		.loc 1 104 27 is_stmt 0 view .LVU64
 204 000e 0019     		adds	r0, r0, r4
 205              	.LVL30:
 206              		.loc 1 104 27 view .LVU65
 207 0010 4078     		ldrb	r0, [r0, #1]
 208              		.loc 1 104 46 view .LVU66
 209 0012 0002     		lsls	r0, r0, #8
 210              		.loc 1 104 15 view .LVU67
 211 0014 1043     		orrs	r0, r2
 212              	.LVL31:
 105:modbus/functions/mbutils.c **** 
 106:modbus/functions/mbutils.c ****     /* throw away unneeded bits. */
 107:modbus/functions/mbutils.c ****     usWordBuf >>= usNPreBits;
 213              		.loc 1 107 5 is_stmt 1 view .LVU68
 214              		.loc 1 107 15 is_stmt 0 view .LVU69
 215 0016 0722     		movs	r2, #7
 216 0018 0A40     		ands	r2, r1
 217 001a 1041     		asrs	r0, r0, r2
 218              	.LVL32:
 219              		.loc 1 107 15 view .LVU70
 220 001c 80B2     		uxth	r0, r0
 221              	.LVL33:
 108:modbus/functions/mbutils.c **** 
 109:modbus/functions/mbutils.c ****     /* mask away bits above the requested bitfield. */
 110:modbus/functions/mbutils.c ****     usWordBuf &= usMask;
 222              		.loc 1 110 5 is_stmt 1 view .LVU71
 223              		.loc 1 110 15 is_stmt 0 view .LVU72
 224 001e 1840     		ands	r0, r3
 225              	.LVL34:
 111:modbus/functions/mbutils.c **** 
 112:modbus/functions/mbutils.c ****     return ( UCHAR ) usWordBuf;
 226              		.loc 1 112 5 is_stmt 1 view .LVU73
 227              		.loc 1 112 12 is_stmt 0 view .LVU74
 228 0020 C0B2     		uxtb	r0, r0
ARM GAS  /tmp/cc4Xjg7U.s 			page 7


 229              	.LVL35:
 113:modbus/functions/mbutils.c **** }
 230              		.loc 1 113 1 view .LVU75
 231              		@ sp needed
 232              	.LVL36:
 233              		.loc 1 113 1 view .LVU76
 234 0022 10BD     		pop	{r4, pc}
 235              		.cfi_endproc
 236              	.LFE38:
 238              		.section	.text.prveMBError2Exception,"ax",%progbits
 239              		.align	1
 240              		.global	prveMBError2Exception
 241              		.syntax unified
 242              		.code	16
 243              		.thumb_func
 244              		.fpu softvfp
 246              	prveMBError2Exception:
 247              	.LVL37:
 248              	.LFB39:
 114:modbus/functions/mbutils.c **** 
 115:modbus/functions/mbutils.c **** eMBException
 116:modbus/functions/mbutils.c **** prveMBError2Exception( eMBErrorCode eErrorCode )
 117:modbus/functions/mbutils.c **** {
 249              		.loc 1 117 1 is_stmt 1 view -0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 118:modbus/functions/mbutils.c ****     eMBException    eStatus;
 254              		.loc 1 118 5 view .LVU78
 119:modbus/functions/mbutils.c **** 
 120:modbus/functions/mbutils.c ****     switch ( eErrorCode )
 255              		.loc 1 120 5 view .LVU79
 256 0000 0128     		cmp	r0, #1
 257 0002 05D0     		beq	.L9
 258 0004 0028     		cmp	r0, #0
 259 0006 05D0     		beq	.L10
 260 0008 0728     		cmp	r0, #7
 261 000a 05D0     		beq	.L11
 121:modbus/functions/mbutils.c ****     {
 122:modbus/functions/mbutils.c ****         case MB_ENOERR:
 123:modbus/functions/mbutils.c ****             eStatus = MB_EX_NONE;
 124:modbus/functions/mbutils.c ****             break;
 125:modbus/functions/mbutils.c **** 
 126:modbus/functions/mbutils.c ****         case MB_ENOREG:
 127:modbus/functions/mbutils.c ****             eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 128:modbus/functions/mbutils.c ****             break;
 129:modbus/functions/mbutils.c **** 
 130:modbus/functions/mbutils.c ****         case MB_ETIMEDOUT:
 131:modbus/functions/mbutils.c ****             eStatus = MB_EX_SLAVE_BUSY;
 132:modbus/functions/mbutils.c ****             break;
 133:modbus/functions/mbutils.c **** 
 134:modbus/functions/mbutils.c ****         default:
 135:modbus/functions/mbutils.c ****             eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 262              		.loc 1 135 21 is_stmt 0 view .LVU80
 263 000c 0420     		movs	r0, #4
 264              	.LVL38:
ARM GAS  /tmp/cc4Xjg7U.s 			page 8


 265              	.L8:
 136:modbus/functions/mbutils.c ****             break;
 137:modbus/functions/mbutils.c ****     }
 138:modbus/functions/mbutils.c **** 
 139:modbus/functions/mbutils.c ****     return eStatus;
 266              		.loc 1 139 5 is_stmt 1 view .LVU81
 140:modbus/functions/mbutils.c **** }
 267              		.loc 1 140 1 is_stmt 0 view .LVU82
 268              		@ sp needed
 269 000e 7047     		bx	lr
 270              	.LVL39:
 271              	.L9:
 127:modbus/functions/mbutils.c ****             break;
 272              		.loc 1 127 21 view .LVU83
 273 0010 0220     		movs	r0, #2
 274              	.LVL40:
 127:modbus/functions/mbutils.c ****             break;
 275              		.loc 1 127 21 view .LVU84
 276 0012 FCE7     		b	.L8
 277              	.LVL41:
 278              	.L10:
 123:modbus/functions/mbutils.c ****             break;
 279              		.loc 1 123 21 view .LVU85
 280 0014 0020     		movs	r0, #0
 281              	.LVL42:
 123:modbus/functions/mbutils.c ****             break;
 282              		.loc 1 123 21 view .LVU86
 283 0016 FAE7     		b	.L8
 284              	.LVL43:
 285              	.L11:
 131:modbus/functions/mbutils.c ****             break;
 286              		.loc 1 131 21 view .LVU87
 287 0018 0620     		movs	r0, #6
 288              	.LVL44:
 131:modbus/functions/mbutils.c ****             break;
 289              		.loc 1 131 21 view .LVU88
 290 001a F8E7     		b	.L8
 291              		.cfi_endproc
 292              	.LFE39:
 294              		.section	.rodata.__func__.7840,"a"
 295              		.align	2
 296              		.set	.LANCHOR0,. + 0
 299              	__func__.7840:
 300 0000 784D4255 		.ascii	"xMBUtilSetBits\000"
 300      74696C53 
 300      65744269 
 300      747300
 301              		.section	.rodata.xMBUtilSetBits.str1.4,"aMS",%progbits,1
 302              		.align	2
 303              	.LC0:
 304 0000 75634E42 		.ascii	"ucNBits <= 8\000"
 304      69747320 
 304      3C3D2038 
 304      00
 305 000d 000000   		.space	3
 306              	.LC3:
 307 0010 6D6F6462 		.ascii	"modbus/functions/mbutils.c\000"
ARM GAS  /tmp/cc4Xjg7U.s 			page 9


 307      75732F66 
 307      756E6374 
 307      696F6E73 
 307      2F6D6275 
 308              		.text
 309              	.Letext0:
 310              		.file 2 "/opt/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi/8.2.1/include/stddef.h"
 311              		.file 3 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/machine/_default_types.h"
 312              		.file 4 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/lock.h"
 313              		.file 5 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_types.h"
 314              		.file 6 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/reent.h"
 315              		.file 7 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/stdlib.h"
 316              		.file 8 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_stdint.h"
 317              		.file 9 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 318              		.file 10 "modbus/port/port.h"
 319              		.file 11 "modbus/include/mbport.h"
 320              		.file 12 "modbus/include/mbproto.h"
 321              		.file 13 "modbus/include/mb.h"
 322              		.file 14 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/assert.h"
ARM GAS  /tmp/cc4Xjg7U.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mbutils.c
     /tmp/cc4Xjg7U.s:16     .text.xMBUtilSetBits:0000000000000000 $t
     /tmp/cc4Xjg7U.s:24     .text.xMBUtilSetBits:0000000000000000 xMBUtilSetBits
     /tmp/cc4Xjg7U.s:153    .text.xMBUtilSetBits:0000000000000050 $d
     /tmp/cc4Xjg7U.s:160    .text.xMBUtilGetBits:0000000000000000 $t
     /tmp/cc4Xjg7U.s:167    .text.xMBUtilGetBits:0000000000000000 xMBUtilGetBits
     /tmp/cc4Xjg7U.s:239    .text.prveMBError2Exception:0000000000000000 $t
     /tmp/cc4Xjg7U.s:246    .text.prveMBError2Exception:0000000000000000 prveMBError2Exception
     /tmp/cc4Xjg7U.s:295    .rodata.__func__.7840:0000000000000000 $d
     /tmp/cc4Xjg7U.s:299    .rodata.__func__.7840:0000000000000000 __func__.7840
     /tmp/cc4Xjg7U.s:302    .rodata.xMBUtilSetBits.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
__assert_func
