ARM GAS  /tmp/cc53Pg4v.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"mb.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.eMBInit,"ax",%progbits
  16              		.align	1
  17              		.global	eMBInit
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	eMBInit:
  25              	.LVL0:
  26              	.LFB37:
  27              		.file 1 "modbus/mb.c"
   1:modbus/mb.c   **** /* 
   2:modbus/mb.c   ****  * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3:modbus/mb.c   ****  * Copyright (c) 2006-2018 Christian Walter <cwalter@embedded-solutions.at>
   4:modbus/mb.c   ****  * All rights reserved.
   5:modbus/mb.c   ****  *
   6:modbus/mb.c   ****  * Redistribution and use in source and binary forms, with or without
   7:modbus/mb.c   ****  * modification, are permitted provided that the following conditions
   8:modbus/mb.c   ****  * are met:
   9:modbus/mb.c   ****  * 1. Redistributions of source code must retain the above copyright
  10:modbus/mb.c   ****  *    notice, this list of conditions and the following disclaimer.
  11:modbus/mb.c   ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:modbus/mb.c   ****  *    notice, this list of conditions and the following disclaimer in the
  13:modbus/mb.c   ****  *    documentation and/or other materials provided with the distribution.
  14:modbus/mb.c   ****  * 3. The name of the author may not be used to endorse or promote products
  15:modbus/mb.c   ****  *    derived from this software without specific prior written permission.
  16:modbus/mb.c   ****  *
  17:modbus/mb.c   ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18:modbus/mb.c   ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19:modbus/mb.c   ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20:modbus/mb.c   ****  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:modbus/mb.c   ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22:modbus/mb.c   ****  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23:modbus/mb.c   ****  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24:modbus/mb.c   ****  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25:modbus/mb.c   ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26:modbus/mb.c   ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:modbus/mb.c   ****  *
  28:modbus/mb.c   ****  */
  29:modbus/mb.c   **** 
  30:modbus/mb.c   **** /* ----------------------- System includes ----------------------------------*/
  31:modbus/mb.c   **** #include "stdlib.h"
ARM GAS  /tmp/cc53Pg4v.s 			page 2


  32:modbus/mb.c   **** #include "string.h"
  33:modbus/mb.c   **** 
  34:modbus/mb.c   **** /* ----------------------- Platform includes --------------------------------*/
  35:modbus/mb.c   **** #include "port/port.h"
  36:modbus/mb.c   **** 
  37:modbus/mb.c   **** /* ----------------------- Modbus includes ----------------------------------*/
  38:modbus/mb.c   **** #include "include/mb.h"
  39:modbus/mb.c   **** #include "include/mbconfig.h"
  40:modbus/mb.c   **** #include "include/mbframe.h"
  41:modbus/mb.c   **** #include "include/mbproto.h"
  42:modbus/mb.c   **** #include "include/mbfunc.h"
  43:modbus/mb.c   **** 
  44:modbus/mb.c   **** #include "include/mbport.h"
  45:modbus/mb.c   **** #if MB_RTU_ENABLED == 1
  46:modbus/mb.c   **** #include "rtu/mbrtu.h"
  47:modbus/mb.c   **** #endif
  48:modbus/mb.c   **** #if MB_ASCII_ENABLED == 0
  49:modbus/mb.c   **** //#include "mbascii.h"
  50:modbus/mb.c   **** #endif
  51:modbus/mb.c   **** #if MB_TCP_ENABLED == 0
  52:modbus/mb.c   **** //#include "mbtcp.h"
  53:modbus/mb.c   **** #endif
  54:modbus/mb.c   **** 
  55:modbus/mb.c   **** #ifndef MB_PORT_HAS_CLOSE
  56:modbus/mb.c   **** #define MB_PORT_HAS_CLOSE 0
  57:modbus/mb.c   **** #endif
  58:modbus/mb.c   **** 
  59:modbus/mb.c   **** /* ----------------------- Static variables ---------------------------------*/
  60:modbus/mb.c   **** 
  61:modbus/mb.c   **** static UCHAR    ucMBAddress;
  62:modbus/mb.c   **** static eMBMode  eMBCurrentMode;
  63:modbus/mb.c   **** 
  64:modbus/mb.c   **** static enum
  65:modbus/mb.c   **** {
  66:modbus/mb.c   ****     STATE_ENABLED,
  67:modbus/mb.c   ****     STATE_DISABLED,
  68:modbus/mb.c   ****     STATE_NOT_INITIALIZED
  69:modbus/mb.c   **** } eMBState = STATE_NOT_INITIALIZED;
  70:modbus/mb.c   **** 
  71:modbus/mb.c   **** /* Functions pointer which are initialized in eMBInit( ). Depending on the
  72:modbus/mb.c   ****  * mode (RTU or ASCII) the are set to the correct implementations.
  73:modbus/mb.c   ****  */
  74:modbus/mb.c   **** static peMBFrameSend peMBFrameSendCur;
  75:modbus/mb.c   **** static pvMBFrameStart pvMBFrameStartCur;
  76:modbus/mb.c   **** static pvMBFrameStop pvMBFrameStopCur;
  77:modbus/mb.c   **** static peMBFrameReceive peMBFrameReceiveCur;
  78:modbus/mb.c   **** static pvMBFrameClose pvMBFrameCloseCur;
  79:modbus/mb.c   **** 
  80:modbus/mb.c   **** /* Callback functions required by the porting layer. They are called when
  81:modbus/mb.c   ****  * an external event has happend which includes a timeout or the reception
  82:modbus/mb.c   ****  * or transmission of a character.
  83:modbus/mb.c   ****  */
  84:modbus/mb.c   **** BOOL( *pxMBFrameCBByteReceived ) ( void );
  85:modbus/mb.c   **** BOOL( *pxMBFrameCBTransmitterEmpty ) ( void );
  86:modbus/mb.c   **** BOOL( *pxMBPortCBTimerExpired ) ( void );
  87:modbus/mb.c   **** 
  88:modbus/mb.c   **** BOOL( *pxMBFrameCBReceiveFSMCur ) ( void );
ARM GAS  /tmp/cc53Pg4v.s 			page 3


  89:modbus/mb.c   **** BOOL( *pxMBFrameCBTransmitFSMCur ) ( void );
  90:modbus/mb.c   **** 
  91:modbus/mb.c   **** /* An array of Modbus functions handlers which associates Modbus function
  92:modbus/mb.c   ****  * codes with implementing functions.
  93:modbus/mb.c   ****  */
  94:modbus/mb.c   **** static xMBFunctionHandler xFuncHandlers[MB_FUNC_HANDLERS_MAX] = {
  95:modbus/mb.c   **** #if MB_FUNC_OTHER_REP_SLAVEID_ENABLED > 0
  96:modbus/mb.c   ****     {MB_FUNC_OTHER_REPORT_SLAVEID, eMBFuncReportSlaveID},
  97:modbus/mb.c   **** #endif
  98:modbus/mb.c   **** #if MB_FUNC_READ_INPUT_ENABLED > 0
  99:modbus/mb.c   ****     {MB_FUNC_READ_INPUT_REGISTER, eMBFuncReadInputRegister},
 100:modbus/mb.c   **** #endif
 101:modbus/mb.c   **** #if MB_FUNC_READ_HOLDING_ENABLED > 0
 102:modbus/mb.c   ****     {MB_FUNC_READ_HOLDING_REGISTER, eMBFuncReadHoldingRegister},
 103:modbus/mb.c   **** #endif
 104:modbus/mb.c   **** #if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
 105:modbus/mb.c   ****     {MB_FUNC_WRITE_MULTIPLE_REGISTERS, eMBFuncWriteMultipleHoldingRegister},
 106:modbus/mb.c   **** #endif
 107:modbus/mb.c   **** #if MB_FUNC_WRITE_HOLDING_ENABLED > 0
 108:modbus/mb.c   ****     {MB_FUNC_WRITE_REGISTER, eMBFuncWriteHoldingRegister},
 109:modbus/mb.c   **** #endif
 110:modbus/mb.c   **** #if MB_FUNC_READWRITE_HOLDING_ENABLED > 0
 111:modbus/mb.c   ****     {MB_FUNC_READWRITE_MULTIPLE_REGISTERS, eMBFuncReadWriteMultipleHoldingRegister},
 112:modbus/mb.c   **** #endif
 113:modbus/mb.c   **** #if MB_FUNC_READ_COILS_ENABLED > 0
 114:modbus/mb.c   ****     {MB_FUNC_READ_COILS, eMBFuncReadCoils},
 115:modbus/mb.c   **** #endif
 116:modbus/mb.c   **** #if MB_FUNC_WRITE_COIL_ENABLED > 0
 117:modbus/mb.c   ****     {MB_FUNC_WRITE_SINGLE_COIL, eMBFuncWriteCoil},
 118:modbus/mb.c   **** #endif
 119:modbus/mb.c   **** #if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
 120:modbus/mb.c   ****     {MB_FUNC_WRITE_MULTIPLE_COILS, eMBFuncWriteMultipleCoils},
 121:modbus/mb.c   **** #endif
 122:modbus/mb.c   **** #if MB_FUNC_READ_DISCRETE_INPUTS_ENABLED > 0
 123:modbus/mb.c   ****     {MB_FUNC_READ_DISCRETE_INPUTS, eMBFuncReadDiscreteInputs},
 124:modbus/mb.c   **** #endif
 125:modbus/mb.c   **** };
 126:modbus/mb.c   **** 
 127:modbus/mb.c   **** /* ----------------------- Start implementation -----------------------------*/
 128:modbus/mb.c   **** eMBErrorCode
 129:modbus/mb.c   **** eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
 130:modbus/mb.c   **** {
  28              		.loc 1 130 1 view -0
  29              		.cfi_startproc
  30              		@ args = 4, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 130 1 is_stmt 0 view .LVU1
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 0D00     		movs	r5, r1
  41 0004 1100     		movs	r1, r2
  42              	.LVL1:
ARM GAS  /tmp/cc53Pg4v.s 			page 4


  43              		.loc 1 130 1 view .LVU2
  44 0006 1A00     		movs	r2, r3
  45              	.LVL2:
  46              		.loc 1 130 1 view .LVU3
  47 0008 04AB     		add	r3, sp, #16
  48              	.LVL3:
  49              		.loc 1 130 1 view .LVU4
  50 000a 1B78     		ldrb	r3, [r3]
  51              	.LVL4:
 131:modbus/mb.c   ****     eMBErrorCode    eStatus = MB_ENOERR;
  52              		.loc 1 131 5 is_stmt 1 view .LVU5
 132:modbus/mb.c   **** 
 133:modbus/mb.c   ****     /* check preconditions */
 134:modbus/mb.c   ****     if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
  53              		.loc 1 134 5 view .LVU6
 135:modbus/mb.c   ****         ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
  54              		.loc 1 135 45 is_stmt 0 view .LVU7
  55 000c 6C1E     		subs	r4, r5, #1
  56 000e E4B2     		uxtb	r4, r4
 134:modbus/mb.c   ****         ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
  57              		.loc 1 134 7 view .LVU8
  58 0010 F62C     		cmp	r4, #246
  59 0012 2AD8     		bhi	.L3
 136:modbus/mb.c   ****     {
 137:modbus/mb.c   ****         eStatus = MB_EINVAL;
 138:modbus/mb.c   ****     }
 139:modbus/mb.c   ****     else
 140:modbus/mb.c   ****     {
 141:modbus/mb.c   ****         ucMBAddress = ucSlaveAddress;
  60              		.loc 1 141 9 is_stmt 1 view .LVU9
  61              		.loc 1 141 21 is_stmt 0 view .LVU10
  62 0014 174C     		ldr	r4, .L7
  63 0016 2570     		strb	r5, [r4]
 142:modbus/mb.c   **** 
 143:modbus/mb.c   ****         switch ( eMode )
  64              		.loc 1 143 9 is_stmt 1 view .LVU11
  65 0018 0028     		cmp	r0, #0
  66 001a 01D0     		beq	.L6
 144:modbus/mb.c   ****         {
 145:modbus/mb.c   **** #if MB_RTU_ENABLED > 0
 146:modbus/mb.c   ****         case MB_RTU:
 147:modbus/mb.c   ****             pvMBFrameStartCur = eMBRTUStart;
 148:modbus/mb.c   ****             pvMBFrameStopCur = eMBRTUStop;
 149:modbus/mb.c   ****             peMBFrameSendCur = eMBRTUSend;
 150:modbus/mb.c   ****             peMBFrameReceiveCur = eMBRTUReceive;
 151:modbus/mb.c   ****             pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 152:modbus/mb.c   ****             pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 153:modbus/mb.c   ****             pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 154:modbus/mb.c   ****             pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 155:modbus/mb.c   **** 
 156:modbus/mb.c   ****             eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 157:modbus/mb.c   ****             break;
 158:modbus/mb.c   **** #endif
 159:modbus/mb.c   **** #if MB_ASCII_ENABLED > 0
 160:modbus/mb.c   ****         case MB_ASCII:
 161:modbus/mb.c   ****             pvMBFrameStartCur = eMBASCIIStart;
 162:modbus/mb.c   ****             pvMBFrameStopCur = eMBASCIIStop;
ARM GAS  /tmp/cc53Pg4v.s 			page 5


 163:modbus/mb.c   ****             peMBFrameSendCur = eMBASCIISend;
 164:modbus/mb.c   ****             peMBFrameReceiveCur = eMBASCIIReceive;
 165:modbus/mb.c   ****             pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 166:modbus/mb.c   ****             pxMBFrameCBByteReceived = xMBASCIIReceiveFSM;
 167:modbus/mb.c   ****             pxMBFrameCBTransmitterEmpty = xMBASCIITransmitFSM;
 168:modbus/mb.c   ****             pxMBPortCBTimerExpired = xMBASCIITimerT1SExpired;
 169:modbus/mb.c   **** 
 170:modbus/mb.c   ****             eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 171:modbus/mb.c   ****             break;
 172:modbus/mb.c   **** #endif
 173:modbus/mb.c   ****         default:
 174:modbus/mb.c   ****             eStatus = MB_EINVAL;
  67              		.loc 1 174 21 is_stmt 0 view .LVU12
  68 001c 0224     		movs	r4, #2
  69 001e 25E0     		b	.L2
  70              	.L6:
 147:modbus/mb.c   ****             pvMBFrameStopCur = eMBRTUStop;
  71              		.loc 1 147 13 is_stmt 1 view .LVU13
 147:modbus/mb.c   ****             pvMBFrameStopCur = eMBRTUStop;
  72              		.loc 1 147 31 is_stmt 0 view .LVU14
  73 0020 1548     		ldr	r0, .L7+4
  74              	.LVL5:
 147:modbus/mb.c   ****             pvMBFrameStopCur = eMBRTUStop;
  75              		.loc 1 147 31 view .LVU15
  76 0022 164C     		ldr	r4, .L7+8
  77 0024 0460     		str	r4, [r0]
 148:modbus/mb.c   ****             peMBFrameSendCur = eMBRTUSend;
  78              		.loc 1 148 13 is_stmt 1 view .LVU16
 148:modbus/mb.c   ****             peMBFrameSendCur = eMBRTUSend;
  79              		.loc 1 148 30 is_stmt 0 view .LVU17
  80 0026 1648     		ldr	r0, .L7+12
  81 0028 164C     		ldr	r4, .L7+16
  82 002a 0460     		str	r4, [r0]
 149:modbus/mb.c   ****             peMBFrameReceiveCur = eMBRTUReceive;
  83              		.loc 1 149 13 is_stmt 1 view .LVU18
 149:modbus/mb.c   ****             peMBFrameReceiveCur = eMBRTUReceive;
  84              		.loc 1 149 30 is_stmt 0 view .LVU19
  85 002c 1648     		ldr	r0, .L7+20
  86 002e 174C     		ldr	r4, .L7+24
  87 0030 0460     		str	r4, [r0]
 150:modbus/mb.c   ****             pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
  88              		.loc 1 150 13 is_stmt 1 view .LVU20
 150:modbus/mb.c   ****             pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
  89              		.loc 1 150 33 is_stmt 0 view .LVU21
  90 0032 1748     		ldr	r0, .L7+28
  91 0034 174C     		ldr	r4, .L7+32
  92 0036 0460     		str	r4, [r0]
 151:modbus/mb.c   ****             pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
  93              		.loc 1 151 13 is_stmt 1 view .LVU22
 151:modbus/mb.c   ****             pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
  94              		.loc 1 151 31 is_stmt 0 view .LVU23
  95 0038 1748     		ldr	r0, .L7+36
  96 003a 0024     		movs	r4, #0
  97 003c 0460     		str	r4, [r0]
 152:modbus/mb.c   ****             pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
  98              		.loc 1 152 13 is_stmt 1 view .LVU24
 152:modbus/mb.c   ****             pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
ARM GAS  /tmp/cc53Pg4v.s 			page 6


  99              		.loc 1 152 37 is_stmt 0 view .LVU25
 100 003e 1748     		ldr	r0, .L7+40
 101 0040 174C     		ldr	r4, .L7+44
 102 0042 0460     		str	r4, [r0]
 153:modbus/mb.c   ****             pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 103              		.loc 1 153 13 is_stmt 1 view .LVU26
 153:modbus/mb.c   ****             pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 104              		.loc 1 153 41 is_stmt 0 view .LVU27
 105 0044 1748     		ldr	r0, .L7+48
 106 0046 184C     		ldr	r4, .L7+52
 107 0048 0460     		str	r4, [r0]
 154:modbus/mb.c   **** 
 108              		.loc 1 154 13 is_stmt 1 view .LVU28
 154:modbus/mb.c   **** 
 109              		.loc 1 154 36 is_stmt 0 view .LVU29
 110 004a 1848     		ldr	r0, .L7+56
 111 004c 184C     		ldr	r4, .L7+60
 112 004e 0460     		str	r4, [r0]
 156:modbus/mb.c   ****             break;
 113              		.loc 1 156 13 is_stmt 1 view .LVU30
 156:modbus/mb.c   ****             break;
 114              		.loc 1 156 23 is_stmt 0 view .LVU31
 115 0050 2800     		movs	r0, r5
 116 0052 FFF7FEFF 		bl	eMBRTUInit
 117              	.LVL6:
 156:modbus/mb.c   ****             break;
 118              		.loc 1 156 23 view .LVU32
 119 0056 041E     		subs	r4, r0, #0
 120              	.LVL7:
 157:modbus/mb.c   **** #endif
 121              		.loc 1 157 13 is_stmt 1 view .LVU33
 175:modbus/mb.c   ****         }
 176:modbus/mb.c   **** 
 177:modbus/mb.c   ****         if( eStatus == MB_ENOERR )
 122              		.loc 1 177 9 view .LVU34
 123              		.loc 1 177 11 is_stmt 0 view .LVU35
 124 0058 08D1     		bne	.L2
 178:modbus/mb.c   ****         {
 179:modbus/mb.c   ****             if( !xMBPortEventInit(  ) )
 125              		.loc 1 179 13 is_stmt 1 view .LVU36
 126              		.loc 1 179 18 is_stmt 0 view .LVU37
 127 005a FFF7FEFF 		bl	xMBPortEventInit
 128              	.LVL8:
 129              		.loc 1 179 15 view .LVU38
 130 005e 0028     		cmp	r0, #0
 131 0060 06D0     		beq	.L5
 180:modbus/mb.c   ****             {
 181:modbus/mb.c   ****                 /* port dependent event module initalization failed. */
 182:modbus/mb.c   ****                 eStatus = MB_EPORTERR;
 183:modbus/mb.c   ****             }
 184:modbus/mb.c   ****             else
 185:modbus/mb.c   ****             {
 186:modbus/mb.c   ****                 eMBCurrentMode = eMode;
 132              		.loc 1 186 17 is_stmt 1 view .LVU39
 187:modbus/mb.c   ****                 eMBState = STATE_DISABLED;
 133              		.loc 1 187 17 view .LVU40
 134              		.loc 1 187 26 is_stmt 0 view .LVU41
ARM GAS  /tmp/cc53Pg4v.s 			page 7


 135 0062 144B     		ldr	r3, .L7+64
 136 0064 0122     		movs	r2, #1
 137 0066 1A70     		strb	r2, [r3]
 138 0068 00E0     		b	.L2
 139              	.LVL9:
 140              	.L3:
 137:modbus/mb.c   ****     }
 141              		.loc 1 137 17 view .LVU42
 142 006a 0224     		movs	r4, #2
 143              	.LVL10:
 144              	.L2:
 188:modbus/mb.c   ****             }
 189:modbus/mb.c   ****         }
 190:modbus/mb.c   ****     }
 191:modbus/mb.c   ****     return eStatus;
 145              		.loc 1 191 5 is_stmt 1 view .LVU43
 192:modbus/mb.c   **** }
 146              		.loc 1 192 1 is_stmt 0 view .LVU44
 147 006c 2000     		movs	r0, r4
 148              		@ sp needed
 149              	.LVL11:
 150              		.loc 1 192 1 view .LVU45
 151 006e 70BD     		pop	{r4, r5, r6, pc}
 152              	.LVL12:
 153              	.L5:
 182:modbus/mb.c   ****             }
 154              		.loc 1 182 25 view .LVU46
 155 0070 0324     		movs	r4, #3
 156              	.LVL13:
 182:modbus/mb.c   ****             }
 157              		.loc 1 182 25 view .LVU47
 158 0072 FBE7     		b	.L2
 159              	.L8:
 160              		.align	2
 161              	.L7:
 162 0074 00000000 		.word	.LANCHOR0
 163 0078 00000000 		.word	.LANCHOR1
 164 007c 00000000 		.word	eMBRTUStart
 165 0080 00000000 		.word	.LANCHOR2
 166 0084 00000000 		.word	eMBRTUStop
 167 0088 00000000 		.word	.LANCHOR3
 168 008c 00000000 		.word	eMBRTUSend
 169 0090 00000000 		.word	.LANCHOR4
 170 0094 00000000 		.word	eMBRTUReceive
 171 0098 00000000 		.word	.LANCHOR5
 172 009c 00000000 		.word	pxMBFrameCBByteReceived
 173 00a0 00000000 		.word	xMBRTUReceiveFSM
 174 00a4 00000000 		.word	pxMBFrameCBTransmitterEmpty
 175 00a8 00000000 		.word	xMBRTUTransmitFSM
 176 00ac 00000000 		.word	pxMBPortCBTimerExpired
 177 00b0 00000000 		.word	xMBRTUTimerT35Expired
 178 00b4 00000000 		.word	.LANCHOR6
 179              		.cfi_endproc
 180              	.LFE37:
 182              		.section	.text.eMBRegisterCB,"ax",%progbits
 183              		.align	1
 184              		.global	eMBRegisterCB
ARM GAS  /tmp/cc53Pg4v.s 			page 8


 185              		.syntax unified
 186              		.code	16
 187              		.thumb_func
 188              		.fpu softvfp
 190              	eMBRegisterCB:
 191              	.LVL14:
 192              	.LFB38:
 193:modbus/mb.c   **** 
 194:modbus/mb.c   **** #if MB_TCP_ENABLED > 0
 195:modbus/mb.c   **** eMBErrorCode
 196:modbus/mb.c   **** eMBTCPInit( USHORT ucTCPPort )
 197:modbus/mb.c   **** {
 198:modbus/mb.c   ****     eMBErrorCode    eStatus = MB_ENOERR;
 199:modbus/mb.c   **** 
 200:modbus/mb.c   ****     if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 201:modbus/mb.c   ****     {
 202:modbus/mb.c   ****         eMBState = STATE_DISABLED;
 203:modbus/mb.c   ****     }
 204:modbus/mb.c   ****     else if( !xMBPortEventInit(  ) )
 205:modbus/mb.c   ****     {
 206:modbus/mb.c   ****         /* Port dependent event module initalization failed. */
 207:modbus/mb.c   ****         eStatus = MB_EPORTERR;
 208:modbus/mb.c   ****     }
 209:modbus/mb.c   ****     else
 210:modbus/mb.c   ****     {
 211:modbus/mb.c   ****         pvMBFrameStartCur = eMBTCPStart;
 212:modbus/mb.c   ****         pvMBFrameStopCur = eMBTCPStop;
 213:modbus/mb.c   ****         peMBFrameReceiveCur = eMBTCPReceive;
 214:modbus/mb.c   ****         peMBFrameSendCur = eMBTCPSend;
 215:modbus/mb.c   ****         pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 216:modbus/mb.c   ****         ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 217:modbus/mb.c   ****         eMBCurrentMode = MB_TCP;
 218:modbus/mb.c   ****         eMBState = STATE_DISABLED;
 219:modbus/mb.c   ****     }
 220:modbus/mb.c   ****     return eStatus;
 221:modbus/mb.c   **** }
 222:modbus/mb.c   **** #endif
 223:modbus/mb.c   **** 
 224:modbus/mb.c   **** eMBErrorCode
 225:modbus/mb.c   **** eMBRegisterCB( UCHAR ucFunctionCode, pxMBFunctionHandler pxHandler )
 226:modbus/mb.c   **** {
 193              		.loc 1 226 1 is_stmt 1 view -0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              		.loc 1 226 1 is_stmt 0 view .LVU49
 198 0000 10B5     		push	{r4, lr}
 199              	.LCFI1:
 200              		.cfi_def_cfa_offset 8
 201              		.cfi_offset 4, -8
 202              		.cfi_offset 14, -4
 227:modbus/mb.c   ****     int             i;
 203              		.loc 1 227 5 is_stmt 1 view .LVU50
 228:modbus/mb.c   ****     eMBErrorCode    eStatus;
 204              		.loc 1 228 5 view .LVU51
 229:modbus/mb.c   **** 
 230:modbus/mb.c   ****     if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
ARM GAS  /tmp/cc53Pg4v.s 			page 9


 205              		.loc 1 230 5 view .LVU52
 206              		.loc 1 230 32 is_stmt 0 view .LVU53
 207 0002 43B2     		sxtb	r3, r0
 208              		.loc 1 230 7 view .LVU54
 209 0004 002B     		cmp	r3, #0
 210 0006 2FDD     		ble	.L20
 231:modbus/mb.c   ****     {
 232:modbus/mb.c   ****         ENTER_CRITICAL_SECTION(  );
 211              		.loc 1 232 9 is_stmt 1 view .LVU55
 212              	.LBB6:
 213              	.LBI6:
 214              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc53Pg4v.s 			page 10


  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 215              		.loc 2 69 57 view .LVU56
 216              	.LBB7:
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 217              		.loc 2 71 3 view .LVU57
 218              		.syntax divided
 219              	@ 71 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 220 0008 72B6     		cpsid i
 221              	@ 0 "" 2
 222              		.thumb
 223              		.syntax unified
 224              	.LBE7:
 225              	.LBE6:
 233:modbus/mb.c   ****         if( pxHandler != NULL )
 226              		.loc 1 233 9 view .LVU58
 227              		.loc 1 233 11 is_stmt 0 view .LVU59
 228 000a 0029     		cmp	r1, #0
 229 000c 0CD0     		beq	.L23
 234:modbus/mb.c   ****         {
 235:modbus/mb.c   ****             for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 230              		.loc 1 235 20 view .LVU60
 231 000e 0023     		movs	r3, #0
 232              	.L11:
 233              	.LVL15:
 234              		.loc 1 235 13 discriminator 1 view .LVU61
 235 0010 0F2B     		cmp	r3, #15
 236 0012 18DC     		bgt	.L15
 236:modbus/mb.c   ****             {
 237:modbus/mb.c   ****                 if( ( xFuncHandlers[i].pxHandler == NULL ) ||
 237              		.loc 1 237 17 is_stmt 1 view .LVU62
 238              		.loc 1 237 39 is_stmt 0 view .LVU63
 239 0014 DC00     		lsls	r4, r3, #3
 240 0016 154A     		ldr	r2, .L26
ARM GAS  /tmp/cc53Pg4v.s 			page 11


 241 0018 1219     		adds	r2, r2, r4
 242 001a 5268     		ldr	r2, [r2, #4]
 243              		.loc 1 237 19 view .LVU64
 244 001c 002A     		cmp	r2, #0
 245 001e 0DD0     		beq	.L13
 246              		.loc 1 237 60 discriminator 1 view .LVU65
 247 0020 8A42     		cmp	r2, r1
 248 0022 0BD0     		beq	.L13
 235:modbus/mb.c   ****             {
 249              		.loc 1 235 52 discriminator 2 view .LVU66
 250 0024 0133     		adds	r3, r3, #1
 251              	.LVL16:
 235:modbus/mb.c   ****             {
 252              		.loc 1 235 52 discriminator 2 view .LVU67
 253 0026 F3E7     		b	.L11
 254              	.LVL17:
 255              	.L23:
 238:modbus/mb.c   ****                     ( xFuncHandlers[i].pxHandler == pxHandler ) )
 239:modbus/mb.c   ****                 {
 240:modbus/mb.c   ****                     xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
 241:modbus/mb.c   ****                     xFuncHandlers[i].pxHandler = pxHandler;
 242:modbus/mb.c   ****                     break;
 243:modbus/mb.c   ****                 }
 244:modbus/mb.c   ****             }
 245:modbus/mb.c   ****             eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
 246:modbus/mb.c   ****         }
 247:modbus/mb.c   ****         else
 248:modbus/mb.c   ****         {
 249:modbus/mb.c   ****             for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 256              		.loc 1 249 20 view .LVU68
 257 0028 0023     		movs	r3, #0
 258              	.LVL18:
 259              	.L12:
 260              		.loc 1 249 13 discriminator 1 view .LVU69
 261 002a 0F2B     		cmp	r3, #15
 262 002c 18DC     		bgt	.L24
 250:modbus/mb.c   ****             {
 251:modbus/mb.c   ****                 if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 263              		.loc 1 251 17 is_stmt 1 view .LVU70
 264              		.loc 1 251 37 is_stmt 0 view .LVU71
 265 002e DA00     		lsls	r2, r3, #3
 266 0030 0E49     		ldr	r1, .L26
 267 0032 525C     		ldrb	r2, [r2, r1]
 268              		.loc 1 251 19 view .LVU72
 269 0034 8242     		cmp	r2, r0
 270 0036 0BD0     		beq	.L25
 249:modbus/mb.c   ****             {
 271              		.loc 1 249 52 discriminator 2 view .LVU73
 272 0038 0133     		adds	r3, r3, #1
 273              	.LVL19:
 249:modbus/mb.c   ****             {
 274              		.loc 1 249 52 discriminator 2 view .LVU74
 275 003a F6E7     		b	.L12
 276              	.LVL20:
 277              	.L13:
 240:modbus/mb.c   ****                     xFuncHandlers[i].pxHandler = pxHandler;
 278              		.loc 1 240 21 is_stmt 1 view .LVU75
ARM GAS  /tmp/cc53Pg4v.s 			page 12


 240:modbus/mb.c   ****                     xFuncHandlers[i].pxHandler = pxHandler;
 279              		.loc 1 240 53 is_stmt 0 view .LVU76
 280 003c 0B4A     		ldr	r2, .L26
 281 003e DC00     		lsls	r4, r3, #3
 282 0040 A054     		strb	r0, [r4, r2]
 241:modbus/mb.c   ****                     break;
 283              		.loc 1 241 21 is_stmt 1 view .LVU77
 241:modbus/mb.c   ****                     break;
 284              		.loc 1 241 48 is_stmt 0 view .LVU78
 285 0042 1219     		adds	r2, r2, r4
 286 0044 5160     		str	r1, [r2, #4]
 242:modbus/mb.c   ****                 }
 287              		.loc 1 242 21 is_stmt 1 view .LVU79
 288              	.L15:
 245:modbus/mb.c   ****         }
 289              		.loc 1 245 13 view .LVU80
 245:modbus/mb.c   ****         }
 290              		.loc 1 245 65 is_stmt 0 view .LVU81
 291 0046 102B     		cmp	r3, #16
 292 0048 0CD0     		beq	.L22
 293 004a 0020     		movs	r0, #0
 294              	.LVL21:
 295              	.L17:
 252:modbus/mb.c   ****                 {
 253:modbus/mb.c   ****                     xFuncHandlers[i].ucFunctionCode = 0;
 254:modbus/mb.c   ****                     xFuncHandlers[i].pxHandler = NULL;
 255:modbus/mb.c   ****                     break;
 256:modbus/mb.c   ****                 }
 257:modbus/mb.c   ****             }
 258:modbus/mb.c   ****             /* Remove can't fail. */
 259:modbus/mb.c   ****             eStatus = MB_ENOERR;
 260:modbus/mb.c   ****         }
 261:modbus/mb.c   ****         EXIT_CRITICAL_SECTION(  );
 296              		.loc 1 261 9 is_stmt 1 view .LVU82
 297              	.LBB8:
 298              	.LBI8:
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 299              		.loc 2 58 57 view .LVU83
 300              	.LBB9:
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 301              		.loc 2 60 3 view .LVU84
 302              		.syntax divided
 303              	@ 60 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 304 004c 62B6     		cpsie i
 305              	@ 0 "" 2
 306              	.LVL22:
 307              		.thumb
 308              		.syntax unified
 309              	.L10:
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 310              		.loc 2 60 3 is_stmt 0 view .LVU85
 311              	.LBE9:
 312              	.LBE8:
 262:modbus/mb.c   ****     }
 263:modbus/mb.c   ****     else
 264:modbus/mb.c   ****     {
 265:modbus/mb.c   ****         eStatus = MB_EINVAL;
ARM GAS  /tmp/cc53Pg4v.s 			page 13


 266:modbus/mb.c   ****     }
 267:modbus/mb.c   ****     return eStatus;
 313              		.loc 1 267 5 is_stmt 1 view .LVU86
 268:modbus/mb.c   **** }
 314              		.loc 1 268 1 is_stmt 0 view .LVU87
 315              		@ sp needed
 316 004e 10BD     		pop	{r4, pc}
 317              	.LVL23:
 318              	.L25:
 253:modbus/mb.c   ****                     xFuncHandlers[i].pxHandler = NULL;
 319              		.loc 1 253 21 is_stmt 1 view .LVU88
 253:modbus/mb.c   ****                     xFuncHandlers[i].pxHandler = NULL;
 320              		.loc 1 253 53 is_stmt 0 view .LVU89
 321 0050 0A00     		movs	r2, r1
 322 0052 DB00     		lsls	r3, r3, #3
 323              	.LVL24:
 253:modbus/mb.c   ****                     xFuncHandlers[i].pxHandler = NULL;
 324              		.loc 1 253 53 view .LVU90
 325 0054 0021     		movs	r1, #0
 326 0056 9954     		strb	r1, [r3, r2]
 254:modbus/mb.c   ****                     break;
 327              		.loc 1 254 21 is_stmt 1 view .LVU91
 254:modbus/mb.c   ****                     break;
 328              		.loc 1 254 48 is_stmt 0 view .LVU92
 329 0058 D318     		adds	r3, r2, r3
 330 005a 5960     		str	r1, [r3, #4]
 255:modbus/mb.c   ****                 }
 331              		.loc 1 255 21 is_stmt 1 view .LVU93
 259:modbus/mb.c   ****         }
 332              		.loc 1 259 21 is_stmt 0 view .LVU94
 333 005c 0020     		movs	r0, #0
 334              	.LVL25:
 255:modbus/mb.c   ****                 }
 335              		.loc 1 255 21 view .LVU95
 336 005e F5E7     		b	.L17
 337              	.LVL26:
 338              	.L24:
 259:modbus/mb.c   ****         }
 339              		.loc 1 259 21 view .LVU96
 340 0060 0020     		movs	r0, #0
 341              	.LVL27:
 259:modbus/mb.c   ****         }
 342              		.loc 1 259 21 view .LVU97
 343 0062 F3E7     		b	.L17
 344              	.LVL28:
 345              	.L22:
 245:modbus/mb.c   ****         }
 346              		.loc 1 245 65 view .LVU98
 347 0064 0420     		movs	r0, #4
 348              	.LVL29:
 245:modbus/mb.c   ****         }
 349              		.loc 1 245 65 view .LVU99
 350 0066 F1E7     		b	.L17
 351              	.LVL30:
 352              	.L20:
 265:modbus/mb.c   ****     }
 353              		.loc 1 265 17 view .LVU100
ARM GAS  /tmp/cc53Pg4v.s 			page 14


 354 0068 0220     		movs	r0, #2
 355              	.LVL31:
 265:modbus/mb.c   ****     }
 356              		.loc 1 265 17 view .LVU101
 357 006a F0E7     		b	.L10
 358              	.L27:
 359              		.align	2
 360              	.L26:
 361 006c 00000000 		.word	xFuncHandlers
 362              		.cfi_endproc
 363              	.LFE38:
 365              		.section	.text.eMBClose,"ax",%progbits
 366              		.align	1
 367              		.global	eMBClose
 368              		.syntax unified
 369              		.code	16
 370              		.thumb_func
 371              		.fpu softvfp
 373              	eMBClose:
 374              	.LFB39:
 269:modbus/mb.c   **** 
 270:modbus/mb.c   **** 
 271:modbus/mb.c   **** eMBErrorCode
 272:modbus/mb.c   **** eMBClose( void )
 273:modbus/mb.c   **** {
 375              		.loc 1 273 1 is_stmt 1 view -0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379 0000 10B5     		push	{r4, lr}
 380              	.LCFI2:
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 4, -8
 383              		.cfi_offset 14, -4
 274:modbus/mb.c   ****     eMBErrorCode    eStatus = MB_ENOERR;
 384              		.loc 1 274 5 view .LVU103
 385              	.LVL32:
 275:modbus/mb.c   **** 
 276:modbus/mb.c   ****     if( eMBState == STATE_DISABLED )
 386              		.loc 1 276 5 view .LVU104
 387              		.loc 1 276 18 is_stmt 0 view .LVU105
 388 0002 074B     		ldr	r3, .L33
 389 0004 1B78     		ldrb	r3, [r3]
 390              		.loc 1 276 7 view .LVU106
 391 0006 012B     		cmp	r3, #1
 392 0008 01D0     		beq	.L32
 277:modbus/mb.c   ****     {
 278:modbus/mb.c   ****         if( pvMBFrameCloseCur != NULL )
 279:modbus/mb.c   ****         {
 280:modbus/mb.c   ****             pvMBFrameCloseCur(  );
 281:modbus/mb.c   ****         }
 282:modbus/mb.c   ****     }
 283:modbus/mb.c   ****     else
 284:modbus/mb.c   ****     {
 285:modbus/mb.c   ****         eStatus = MB_EILLSTATE;
 393              		.loc 1 285 17 view .LVU107
 394 000a 0620     		movs	r0, #6
ARM GAS  /tmp/cc53Pg4v.s 			page 15


 395              	.L29:
 396              	.LVL33:
 286:modbus/mb.c   ****     }
 287:modbus/mb.c   ****     return eStatus;
 397              		.loc 1 287 5 is_stmt 1 view .LVU108
 288:modbus/mb.c   **** }
 398              		.loc 1 288 1 is_stmt 0 view .LVU109
 399              		@ sp needed
 400 000c 10BD     		pop	{r4, pc}
 401              	.LVL34:
 402              	.L32:
 278:modbus/mb.c   ****         {
 403              		.loc 1 278 9 is_stmt 1 view .LVU110
 278:modbus/mb.c   ****         {
 404              		.loc 1 278 31 is_stmt 0 view .LVU111
 405 000e 054B     		ldr	r3, .L33+4
 406 0010 1B68     		ldr	r3, [r3]
 278:modbus/mb.c   ****         {
 407              		.loc 1 278 11 view .LVU112
 408 0012 002B     		cmp	r3, #0
 409 0014 02D0     		beq	.L31
 280:modbus/mb.c   ****         }
 410              		.loc 1 280 13 is_stmt 1 view .LVU113
 411 0016 9847     		blx	r3
 412              	.LVL35:
 274:modbus/mb.c   **** 
 413              		.loc 1 274 21 is_stmt 0 view .LVU114
 414 0018 0020     		movs	r0, #0
 415 001a F7E7     		b	.L29
 416              	.L31:
 417 001c 0020     		movs	r0, #0
 418 001e F5E7     		b	.L29
 419              	.L34:
 420              		.align	2
 421              	.L33:
 422 0020 00000000 		.word	.LANCHOR6
 423 0024 00000000 		.word	.LANCHOR5
 424              		.cfi_endproc
 425              	.LFE39:
 427              		.section	.text.eMBEnable,"ax",%progbits
 428              		.align	1
 429              		.global	eMBEnable
 430              		.syntax unified
 431              		.code	16
 432              		.thumb_func
 433              		.fpu softvfp
 435              	eMBEnable:
 436              	.LFB40:
 289:modbus/mb.c   **** 
 290:modbus/mb.c   **** eMBErrorCode
 291:modbus/mb.c   **** eMBEnable( void )
 292:modbus/mb.c   **** {
 437              		.loc 1 292 1 is_stmt 1 view -0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc53Pg4v.s 			page 16


 442              	.LCFI3:
 443              		.cfi_def_cfa_offset 8
 444              		.cfi_offset 4, -8
 445              		.cfi_offset 14, -4
 293:modbus/mb.c   ****     eMBErrorCode    eStatus = MB_ENOERR;
 446              		.loc 1 293 5 view .LVU116
 447              	.LVL36:
 294:modbus/mb.c   **** 
 295:modbus/mb.c   ****     if( eMBState == STATE_DISABLED )
 448              		.loc 1 295 5 view .LVU117
 449              		.loc 1 295 18 is_stmt 0 view .LVU118
 450 0002 074B     		ldr	r3, .L39
 451 0004 1B78     		ldrb	r3, [r3]
 452              		.loc 1 295 7 view .LVU119
 453 0006 012B     		cmp	r3, #1
 454 0008 01D0     		beq	.L38
 296:modbus/mb.c   ****     {
 297:modbus/mb.c   ****         /* Activate the protocol stack. */
 298:modbus/mb.c   ****         pvMBFrameStartCur(  );
 299:modbus/mb.c   ****         eMBState = STATE_ENABLED;
 300:modbus/mb.c   ****     }
 301:modbus/mb.c   ****     else
 302:modbus/mb.c   ****     {
 303:modbus/mb.c   ****         eStatus = MB_EILLSTATE;
 455              		.loc 1 303 17 view .LVU120
 456 000a 0620     		movs	r0, #6
 457              	.L36:
 458              	.LVL37:
 304:modbus/mb.c   ****     }
 305:modbus/mb.c   ****     return eStatus;
 459              		.loc 1 305 5 is_stmt 1 view .LVU121
 306:modbus/mb.c   **** }
 460              		.loc 1 306 1 is_stmt 0 view .LVU122
 461              		@ sp needed
 462 000c 10BD     		pop	{r4, pc}
 463              	.LVL38:
 464              	.L38:
 298:modbus/mb.c   ****         eMBState = STATE_ENABLED;
 465              		.loc 1 298 9 is_stmt 1 view .LVU123
 466 000e 054B     		ldr	r3, .L39+4
 467 0010 1B68     		ldr	r3, [r3]
 468 0012 9847     		blx	r3
 469              	.LVL39:
 299:modbus/mb.c   ****     }
 470              		.loc 1 299 9 view .LVU124
 299:modbus/mb.c   ****     }
 471              		.loc 1 299 18 is_stmt 0 view .LVU125
 472 0014 024B     		ldr	r3, .L39
 473 0016 0022     		movs	r2, #0
 474 0018 1A70     		strb	r2, [r3]
 293:modbus/mb.c   **** 
 475              		.loc 1 293 21 view .LVU126
 476 001a 0020     		movs	r0, #0
 477 001c F6E7     		b	.L36
 478              	.L40:
 479 001e C046     		.align	2
 480              	.L39:
ARM GAS  /tmp/cc53Pg4v.s 			page 17


 481 0020 00000000 		.word	.LANCHOR6
 482 0024 00000000 		.word	.LANCHOR1
 483              		.cfi_endproc
 484              	.LFE40:
 486              		.section	.text.eMBDisable,"ax",%progbits
 487              		.align	1
 488              		.global	eMBDisable
 489              		.syntax unified
 490              		.code	16
 491              		.thumb_func
 492              		.fpu softvfp
 494              	eMBDisable:
 495              	.LFB41:
 307:modbus/mb.c   **** 
 308:modbus/mb.c   **** eMBErrorCode
 309:modbus/mb.c   **** eMBDisable( void )
 310:modbus/mb.c   **** {
 496              		.loc 1 310 1 is_stmt 1 view -0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 0, uses_anonymous_args = 0
 500 0000 10B5     		push	{r4, lr}
 501              	.LCFI4:
 502              		.cfi_def_cfa_offset 8
 503              		.cfi_offset 4, -8
 504              		.cfi_offset 14, -4
 311:modbus/mb.c   ****     eMBErrorCode    eStatus;
 505              		.loc 1 311 5 view .LVU128
 312:modbus/mb.c   **** 
 313:modbus/mb.c   ****     if( eMBState == STATE_ENABLED )
 506              		.loc 1 313 5 view .LVU129
 507              		.loc 1 313 18 is_stmt 0 view .LVU130
 508 0002 094B     		ldr	r3, .L46
 509 0004 1B78     		ldrb	r3, [r3]
 510              		.loc 1 313 7 view .LVU131
 511 0006 002B     		cmp	r3, #0
 512 0008 07D1     		bne	.L42
 314:modbus/mb.c   ****     {
 315:modbus/mb.c   ****         pvMBFrameStopCur(  );
 513              		.loc 1 315 9 is_stmt 1 view .LVU132
 514 000a 084B     		ldr	r3, .L46+4
 515 000c 1B68     		ldr	r3, [r3]
 516 000e 9847     		blx	r3
 517              	.LVL40:
 316:modbus/mb.c   ****         eMBState = STATE_DISABLED;
 518              		.loc 1 316 9 view .LVU133
 519              		.loc 1 316 18 is_stmt 0 view .LVU134
 520 0010 054B     		ldr	r3, .L46
 521 0012 0122     		movs	r2, #1
 522 0014 1A70     		strb	r2, [r3]
 317:modbus/mb.c   ****         eStatus = MB_ENOERR;
 523              		.loc 1 317 9 is_stmt 1 view .LVU135
 524              	.LVL41:
 525              		.loc 1 317 17 is_stmt 0 view .LVU136
 526 0016 0020     		movs	r0, #0
 527              	.LVL42:
 528              	.L43:
ARM GAS  /tmp/cc53Pg4v.s 			page 18


 318:modbus/mb.c   ****     }
 319:modbus/mb.c   ****     else if( eMBState == STATE_DISABLED )
 320:modbus/mb.c   ****     {
 321:modbus/mb.c   ****         eStatus = MB_ENOERR;
 322:modbus/mb.c   ****     }
 323:modbus/mb.c   ****     else
 324:modbus/mb.c   ****     {
 325:modbus/mb.c   ****         eStatus = MB_EILLSTATE;
 326:modbus/mb.c   ****     }
 327:modbus/mb.c   ****     return eStatus;
 529              		.loc 1 327 5 is_stmt 1 view .LVU137
 328:modbus/mb.c   **** }
 530              		.loc 1 328 1 is_stmt 0 view .LVU138
 531              		@ sp needed
 532 0018 10BD     		pop	{r4, pc}
 533              	.LVL43:
 534              	.L42:
 319:modbus/mb.c   ****     {
 535              		.loc 1 319 10 is_stmt 1 view .LVU139
 319:modbus/mb.c   ****     {
 536              		.loc 1 319 12 is_stmt 0 view .LVU140
 537 001a 012B     		cmp	r3, #1
 538 001c 01D0     		beq	.L45
 325:modbus/mb.c   ****     }
 539              		.loc 1 325 17 view .LVU141
 540 001e 0620     		movs	r0, #6
 541 0020 FAE7     		b	.L43
 542              	.L45:
 321:modbus/mb.c   ****     }
 543              		.loc 1 321 17 view .LVU142
 544 0022 0020     		movs	r0, #0
 545 0024 F8E7     		b	.L43
 546              	.L47:
 547 0026 C046     		.align	2
 548              	.L46:
 549 0028 00000000 		.word	.LANCHOR6
 550 002c 00000000 		.word	.LANCHOR2
 551              		.cfi_endproc
 552              	.LFE41:
 554              		.section	.text.eMBPoll,"ax",%progbits
 555              		.align	1
 556              		.global	eMBPoll
 557              		.syntax unified
 558              		.code	16
 559              		.thumb_func
 560              		.fpu softvfp
 562              	eMBPoll:
 563              	.LFB42:
 329:modbus/mb.c   **** 
 330:modbus/mb.c   **** eMBErrorCode
 331:modbus/mb.c   **** eMBPoll( void )
 332:modbus/mb.c   **** {
 564              		.loc 1 332 1 is_stmt 1 view -0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 8
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc53Pg4v.s 			page 19


 569              	.LCFI5:
 570              		.cfi_def_cfa_offset 8
 571              		.cfi_offset 4, -8
 572              		.cfi_offset 14, -4
 573 0002 82B0     		sub	sp, sp, #8
 574              	.LCFI6:
 575              		.cfi_def_cfa_offset 16
 333:modbus/mb.c   ****     static UCHAR   *ucMBFrame;
 576              		.loc 1 333 5 view .LVU144
 334:modbus/mb.c   ****     static UCHAR    ucRcvAddress;
 577              		.loc 1 334 5 view .LVU145
 335:modbus/mb.c   ****     static UCHAR    ucFunctionCode;
 578              		.loc 1 335 5 view .LVU146
 336:modbus/mb.c   ****     static USHORT   usLength;
 579              		.loc 1 336 5 view .LVU147
 337:modbus/mb.c   ****     static eMBException eException;
 580              		.loc 1 337 5 view .LVU148
 338:modbus/mb.c   **** 
 339:modbus/mb.c   ****     int             i;
 581              		.loc 1 339 5 view .LVU149
 340:modbus/mb.c   ****     eMBErrorCode    eStatus = MB_ENOERR;
 582              		.loc 1 340 5 view .LVU150
 583              	.LVL44:
 341:modbus/mb.c   ****     eMBEventType    eEvent;
 584              		.loc 1 341 5 view .LVU151
 342:modbus/mb.c   **** 
 343:modbus/mb.c   ****     /* Check if the protocol stack is ready. */
 344:modbus/mb.c   ****     if( eMBState != STATE_ENABLED )
 585              		.loc 1 344 5 view .LVU152
 586              		.loc 1 344 18 is_stmt 0 view .LVU153
 587 0004 364B     		ldr	r3, .L63
 588 0006 1B78     		ldrb	r3, [r3]
 589              		.loc 1 344 7 view .LVU154
 590 0008 002B     		cmp	r3, #0
 591 000a 63D1     		bne	.L58
 345:modbus/mb.c   ****     {
 346:modbus/mb.c   ****         return MB_EILLSTATE;
 347:modbus/mb.c   ****     }
 348:modbus/mb.c   **** 
 349:modbus/mb.c   ****     /* Check if there is a event available. If not return control to caller.
 350:modbus/mb.c   ****      * Otherwise we will handle the event. */
 351:modbus/mb.c   ****     if( xMBPortEventGet( &eEvent ) == TRUE )
 592              		.loc 1 351 5 is_stmt 1 view .LVU155
 593              		.loc 1 351 9 is_stmt 0 view .LVU156
 594 000c 6B46     		mov	r3, sp
 595 000e D81D     		adds	r0, r3, #7
 596 0010 FFF7FEFF 		bl	xMBPortEventGet
 597              	.LVL45:
 598              		.loc 1 351 7 view .LVU157
 599 0014 0128     		cmp	r0, #1
 600 0016 03D0     		beq	.L62
 352:modbus/mb.c   ****     {
 353:modbus/mb.c   ****         switch ( eEvent )
 354:modbus/mb.c   ****         {
 355:modbus/mb.c   ****         case EV_READY:
 356:modbus/mb.c   ****             break;
 357:modbus/mb.c   **** 
ARM GAS  /tmp/cc53Pg4v.s 			page 20


 358:modbus/mb.c   ****         case EV_FRAME_RECEIVED:
 359:modbus/mb.c   ****             eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 360:modbus/mb.c   ****             if( eStatus == MB_ENOERR )
 361:modbus/mb.c   ****             {
 362:modbus/mb.c   ****                 /* Check if the frame is for us. If not ignore the frame. */
 363:modbus/mb.c   ****                 if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 364:modbus/mb.c   ****                 {
 365:modbus/mb.c   ****                     ( void )xMBPortEventPost( EV_EXECUTE );
 366:modbus/mb.c   ****                 }
 367:modbus/mb.c   ****             }
 368:modbus/mb.c   ****             break;
 369:modbus/mb.c   **** 
 370:modbus/mb.c   ****         case EV_EXECUTE:
 371:modbus/mb.c   ****             ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 372:modbus/mb.c   ****             eException = MB_EX_ILLEGAL_FUNCTION;
 373:modbus/mb.c   ****             for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 374:modbus/mb.c   ****             {
 375:modbus/mb.c   ****                 /* No more function handlers registered. Abort. */
 376:modbus/mb.c   ****                 if( xFuncHandlers[i].ucFunctionCode == 0 )
 377:modbus/mb.c   ****                 {
 378:modbus/mb.c   ****                     break;
 379:modbus/mb.c   ****                 }
 380:modbus/mb.c   ****                 else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 381:modbus/mb.c   ****                 {
 382:modbus/mb.c   ****                     eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 383:modbus/mb.c   ****                     break;
 384:modbus/mb.c   ****                 }
 385:modbus/mb.c   ****             }
 386:modbus/mb.c   **** 
 387:modbus/mb.c   ****             /* If the request was not sent to the broadcast address we
 388:modbus/mb.c   ****              * return a reply. */
 389:modbus/mb.c   ****             if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 390:modbus/mb.c   ****             {
 391:modbus/mb.c   ****                 if( eException != MB_EX_NONE )
 392:modbus/mb.c   ****                 {
 393:modbus/mb.c   ****                     /* An exception occured. Build an error frame. */
 394:modbus/mb.c   ****                     usLength = 0;
 395:modbus/mb.c   ****                     ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 396:modbus/mb.c   ****                     ucMBFrame[usLength++] = eException;
 397:modbus/mb.c   ****                 }
 398:modbus/mb.c   ****                 if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
 399:modbus/mb.c   ****                 {
 400:modbus/mb.c   ****                     vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
 401:modbus/mb.c   ****                 }                
 402:modbus/mb.c   ****                 eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 403:modbus/mb.c   ****             }
 404:modbus/mb.c   ****             break;
 405:modbus/mb.c   **** 
 406:modbus/mb.c   ****         case EV_FRAME_SENT:
 407:modbus/mb.c   ****             break;
 408:modbus/mb.c   ****         }
 409:modbus/mb.c   ****     }
 410:modbus/mb.c   ****     return MB_ENOERR;
 601              		.loc 1 410 12 view .LVU158
 602 0018 0024     		movs	r4, #0
 603              	.LVL46:
 604              	.L49:
ARM GAS  /tmp/cc53Pg4v.s 			page 21


 411:modbus/mb.c   **** }
 605              		.loc 1 411 1 view .LVU159
 606 001a 2000     		movs	r0, r4
 607 001c 02B0     		add	sp, sp, #8
 608              		@ sp needed
 609 001e 10BD     		pop	{r4, pc}
 610              	.LVL47:
 611              	.L62:
 353:modbus/mb.c   ****         {
 612              		.loc 1 353 9 is_stmt 1 view .LVU160
 613 0020 6B46     		mov	r3, sp
 614 0022 0733     		adds	r3, r3, #7
 615 0024 1B78     		ldrb	r3, [r3]
 616 0026 012B     		cmp	r3, #1
 617 0028 03D0     		beq	.L50
 618 002a 022B     		cmp	r3, #2
 619 002c 15D0     		beq	.L51
 410:modbus/mb.c   **** }
 620              		.loc 1 410 12 is_stmt 0 view .LVU161
 621 002e 0024     		movs	r4, #0
 622 0030 F3E7     		b	.L49
 623              	.L50:
 359:modbus/mb.c   ****             if( eStatus == MB_ENOERR )
 624              		.loc 1 359 13 is_stmt 1 view .LVU162
 359:modbus/mb.c   ****             if( eStatus == MB_ENOERR )
 625              		.loc 1 359 23 is_stmt 0 view .LVU163
 626 0032 2C4B     		ldr	r3, .L63+4
 627 0034 1B68     		ldr	r3, [r3]
 628 0036 2C4A     		ldr	r2, .L63+8
 629 0038 2C49     		ldr	r1, .L63+12
 630 003a 2D48     		ldr	r0, .L63+16
 631 003c 9847     		blx	r3
 632              	.LVL48:
 633 003e 041E     		subs	r4, r0, #0
 634              	.LVL49:
 360:modbus/mb.c   ****             {
 635              		.loc 1 360 13 is_stmt 1 view .LVU164
 360:modbus/mb.c   ****             {
 636              		.loc 1 360 15 is_stmt 0 view .LVU165
 637 0040 4AD1     		bne	.L60
 363:modbus/mb.c   ****                 {
 638              		.loc 1 363 17 is_stmt 1 view .LVU166
 363:modbus/mb.c   ****                 {
 639              		.loc 1 363 36 is_stmt 0 view .LVU167
 640 0042 2B4B     		ldr	r3, .L63+16
 641 0044 1B78     		ldrb	r3, [r3]
 642 0046 2B4A     		ldr	r2, .L63+20
 643 0048 1278     		ldrb	r2, [r2]
 363:modbus/mb.c   ****                 {
 644              		.loc 1 363 19 view .LVU168
 645 004a 9342     		cmp	r3, r2
 646 004c 01D0     		beq	.L52
 363:modbus/mb.c   ****                 {
 647              		.loc 1 363 53 discriminator 1 view .LVU169
 648 004e 002B     		cmp	r3, #0
 649 0050 E3D1     		bne	.L49
 650              	.L52:
ARM GAS  /tmp/cc53Pg4v.s 			page 22


 365:modbus/mb.c   ****                 }
 651              		.loc 1 365 21 is_stmt 1 view .LVU170
 365:modbus/mb.c   ****                 }
 652              		.loc 1 365 29 is_stmt 0 view .LVU171
 653 0052 0220     		movs	r0, #2
 654              	.LVL50:
 365:modbus/mb.c   ****                 }
 655              		.loc 1 365 29 view .LVU172
 656 0054 FFF7FEFF 		bl	xMBPortEventPost
 657              	.LVL51:
 658 0058 DFE7     		b	.L49
 659              	.LVL52:
 660              	.L51:
 371:modbus/mb.c   ****             eException = MB_EX_ILLEGAL_FUNCTION;
 661              		.loc 1 371 13 is_stmt 1 view .LVU173
 371:modbus/mb.c   ****             eException = MB_EX_ILLEGAL_FUNCTION;
 662              		.loc 1 371 39 is_stmt 0 view .LVU174
 663 005a 244B     		ldr	r3, .L63+12
 664 005c 1868     		ldr	r0, [r3]
 665 005e 0478     		ldrb	r4, [r0]
 371:modbus/mb.c   ****             eException = MB_EX_ILLEGAL_FUNCTION;
 666              		.loc 1 371 28 view .LVU175
 667 0060 254B     		ldr	r3, .L63+24
 668 0062 1C70     		strb	r4, [r3]
 372:modbus/mb.c   ****             for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 669              		.loc 1 372 13 is_stmt 1 view .LVU176
 372:modbus/mb.c   ****             for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 670              		.loc 1 372 24 is_stmt 0 view .LVU177
 671 0064 254B     		ldr	r3, .L63+28
 672 0066 0122     		movs	r2, #1
 673 0068 1A70     		strb	r2, [r3]
 373:modbus/mb.c   ****             {
 674              		.loc 1 373 13 is_stmt 1 view .LVU178
 675              	.LVL53:
 373:modbus/mb.c   ****             {
 676              		.loc 1 373 20 is_stmt 0 view .LVU179
 677 006a 0023     		movs	r3, #0
 373:modbus/mb.c   ****             {
 678              		.loc 1 373 13 view .LVU180
 679 006c 00E0     		b	.L53
 680              	.LVL54:
 681              	.L55:
 373:modbus/mb.c   ****             {
 682              		.loc 1 373 52 discriminator 2 view .LVU181
 683 006e 0133     		adds	r3, r3, #1
 684              	.LVL55:
 685              	.L53:
 373:modbus/mb.c   ****             {
 686              		.loc 1 373 13 discriminator 1 view .LVU182
 687 0070 0F2B     		cmp	r3, #15
 688 0072 0DDC     		bgt	.L54
 376:modbus/mb.c   ****                 {
 689              		.loc 1 376 17 is_stmt 1 view .LVU183
 376:modbus/mb.c   ****                 {
 690              		.loc 1 376 37 is_stmt 0 view .LVU184
 691 0074 DA00     		lsls	r2, r3, #3
 692 0076 2249     		ldr	r1, .L63+32
ARM GAS  /tmp/cc53Pg4v.s 			page 23


 693 0078 525C     		ldrb	r2, [r2, r1]
 376:modbus/mb.c   ****                 {
 694              		.loc 1 376 19 view .LVU185
 695 007a 002A     		cmp	r2, #0
 696 007c 08D0     		beq	.L54
 380:modbus/mb.c   ****                 {
 697              		.loc 1 380 22 is_stmt 1 view .LVU186
 380:modbus/mb.c   ****                 {
 698              		.loc 1 380 24 is_stmt 0 view .LVU187
 699 007e 9442     		cmp	r4, r2
 700 0080 F5D1     		bne	.L55
 382:modbus/mb.c   ****                     break;
 701              		.loc 1 382 21 is_stmt 1 view .LVU188
 382:modbus/mb.c   ****                     break;
 702              		.loc 1 382 50 is_stmt 0 view .LVU189
 703 0082 DB00     		lsls	r3, r3, #3
 704              	.LVL56:
 382:modbus/mb.c   ****                     break;
 705              		.loc 1 382 50 view .LVU190
 706 0084 CB18     		adds	r3, r1, r3
 707 0086 5B68     		ldr	r3, [r3, #4]
 382:modbus/mb.c   ****                     break;
 708              		.loc 1 382 34 view .LVU191
 709 0088 1749     		ldr	r1, .L63+8
 710 008a 9847     		blx	r3
 711              	.LVL57:
 382:modbus/mb.c   ****                     break;
 712              		.loc 1 382 32 view .LVU192
 713 008c 1B4B     		ldr	r3, .L63+28
 714 008e 1870     		strb	r0, [r3]
 383:modbus/mb.c   ****                 }
 715              		.loc 1 383 21 is_stmt 1 view .LVU193
 716              	.L54:
 389:modbus/mb.c   ****             {
 717              		.loc 1 389 13 view .LVU194
 389:modbus/mb.c   ****             {
 718              		.loc 1 389 30 is_stmt 0 view .LVU195
 719 0090 174B     		ldr	r3, .L63+16
 720 0092 1B78     		ldrb	r3, [r3]
 389:modbus/mb.c   ****             {
 721              		.loc 1 389 15 view .LVU196
 722 0094 002B     		cmp	r3, #0
 723 0096 21D0     		beq	.L61
 391:modbus/mb.c   ****                 {
 724              		.loc 1 391 17 is_stmt 1 view .LVU197
 391:modbus/mb.c   ****                 {
 725              		.loc 1 391 32 is_stmt 0 view .LVU198
 726 0098 184B     		ldr	r3, .L63+28
 727 009a 1B78     		ldrb	r3, [r3]
 391:modbus/mb.c   ****                 {
 728              		.loc 1 391 19 view .LVU199
 729 009c 002B     		cmp	r3, #0
 730 009e 0ED0     		beq	.L57
 394:modbus/mb.c   ****                     ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 731              		.loc 1 394 21 is_stmt 1 view .LVU200
 395:modbus/mb.c   ****                     ucMBFrame[usLength++] = eException;
 732              		.loc 1 395 21 view .LVU201
ARM GAS  /tmp/cc53Pg4v.s 			page 24


 395:modbus/mb.c   ****                     ucMBFrame[usLength++] = eException;
 733              		.loc 1 395 45 is_stmt 0 view .LVU202
 734 00a0 154A     		ldr	r2, .L63+24
 735 00a2 1478     		ldrb	r4, [r2]
 395:modbus/mb.c   ****                     ucMBFrame[usLength++] = eException;
 736              		.loc 1 395 30 view .LVU203
 737 00a4 1148     		ldr	r0, .L63+12
 395:modbus/mb.c   ****                     ucMBFrame[usLength++] = eException;
 738              		.loc 1 395 39 view .LVU204
 739 00a6 104A     		ldr	r2, .L63+8
 740 00a8 0121     		movs	r1, #1
 741 00aa 1180     		strh	r1, [r2]
 395:modbus/mb.c   ****                     ucMBFrame[usLength++] = eException;
 742              		.loc 1 395 45 view .LVU205
 743 00ac 8139     		subs	r1, r1, #129
 744 00ae 2143     		orrs	r1, r4
 395:modbus/mb.c   ****                     ucMBFrame[usLength++] = eException;
 745              		.loc 1 395 43 view .LVU206
 746 00b0 0468     		ldr	r4, [r0]
 747 00b2 2170     		strb	r1, [r4]
 396:modbus/mb.c   ****                 }
 748              		.loc 1 396 21 is_stmt 1 view .LVU207
 396:modbus/mb.c   ****                 }
 749              		.loc 1 396 30 is_stmt 0 view .LVU208
 750 00b4 0068     		ldr	r0, [r0]
 396:modbus/mb.c   ****                 }
 751              		.loc 1 396 39 view .LVU209
 752 00b6 1188     		ldrh	r1, [r2]
 753 00b8 4C1C     		adds	r4, r1, #1
 754 00ba 1480     		strh	r4, [r2]
 396:modbus/mb.c   ****                 }
 755              		.loc 1 396 43 view .LVU210
 756 00bc 4354     		strb	r3, [r0, r1]
 757              	.L57:
 398:modbus/mb.c   ****                 {
 758              		.loc 1 398 17 is_stmt 1 view .LVU211
 402:modbus/mb.c   ****             }
 759              		.loc 1 402 17 view .LVU212
 402:modbus/mb.c   ****             }
 760              		.loc 1 402 27 is_stmt 0 view .LVU213
 761 00be 0A4B     		ldr	r3, .L63+8
 762 00c0 1A88     		ldrh	r2, [r3]
 763 00c2 0A4B     		ldr	r3, .L63+12
 764 00c4 1968     		ldr	r1, [r3]
 765 00c6 0B4B     		ldr	r3, .L63+20
 766 00c8 1878     		ldrb	r0, [r3]
 767 00ca 0E4B     		ldr	r3, .L63+36
 768 00cc 1B68     		ldr	r3, [r3]
 769 00ce 9847     		blx	r3
 770              	.LVL58:
 410:modbus/mb.c   **** }
 771              		.loc 1 410 12 view .LVU214
 772 00d0 0024     		movs	r4, #0
 773 00d2 A2E7     		b	.L49
 774              	.LVL59:
 775              	.L58:
 346:modbus/mb.c   ****     }
ARM GAS  /tmp/cc53Pg4v.s 			page 25


 776              		.loc 1 346 16 view .LVU215
 777 00d4 0624     		movs	r4, #6
 778 00d6 A0E7     		b	.L49
 779              	.LVL60:
 780              	.L60:
 410:modbus/mb.c   **** }
 781              		.loc 1 410 12 view .LVU216
 782 00d8 0024     		movs	r4, #0
 783 00da 9EE7     		b	.L49
 784              	.LVL61:
 785              	.L61:
 410:modbus/mb.c   **** }
 786              		.loc 1 410 12 view .LVU217
 787 00dc 0024     		movs	r4, #0
 788 00de 9CE7     		b	.L49
 789              	.L64:
 790              		.align	2
 791              	.L63:
 792 00e0 00000000 		.word	.LANCHOR6
 793 00e4 00000000 		.word	.LANCHOR4
 794 00e8 00000000 		.word	.LANCHOR7
 795 00ec 00000000 		.word	.LANCHOR8
 796 00f0 00000000 		.word	.LANCHOR9
 797 00f4 00000000 		.word	.LANCHOR0
 798 00f8 00000000 		.word	.LANCHOR10
 799 00fc 00000000 		.word	.LANCHOR11
 800 0100 00000000 		.word	xFuncHandlers
 801 0104 00000000 		.word	.LANCHOR3
 802              		.cfi_endproc
 803              	.LFE42:
 805              		.comm	pxMBFrameCBTransmitFSMCur,4,4
 806              		.comm	pxMBFrameCBReceiveFSMCur,4,4
 807              		.comm	pxMBPortCBTimerExpired,4,4
 808              		.comm	pxMBFrameCBTransmitterEmpty,4,4
 809              		.comm	pxMBFrameCBByteReceived,4,4
 810              		.section	.bss.eException.7963,"aw",%nobits
 811              		.set	.LANCHOR11,. + 0
 814              	eException.7963:
 815 0000 00       		.space	1
 816              		.section	.bss.peMBFrameReceiveCur,"aw",%nobits
 817              		.align	2
 818              		.set	.LANCHOR4,. + 0
 821              	peMBFrameReceiveCur:
 822 0000 00000000 		.space	4
 823              		.section	.bss.peMBFrameSendCur,"aw",%nobits
 824              		.align	2
 825              		.set	.LANCHOR3,. + 0
 828              	peMBFrameSendCur:
 829 0000 00000000 		.space	4
 830              		.section	.bss.pvMBFrameCloseCur,"aw",%nobits
 831              		.align	2
 832              		.set	.LANCHOR5,. + 0
 835              	pvMBFrameCloseCur:
 836 0000 00000000 		.space	4
 837              		.section	.bss.pvMBFrameStartCur,"aw",%nobits
 838              		.align	2
 839              		.set	.LANCHOR1,. + 0
ARM GAS  /tmp/cc53Pg4v.s 			page 26


 842              	pvMBFrameStartCur:
 843 0000 00000000 		.space	4
 844              		.section	.bss.pvMBFrameStopCur,"aw",%nobits
 845              		.align	2
 846              		.set	.LANCHOR2,. + 0
 849              	pvMBFrameStopCur:
 850 0000 00000000 		.space	4
 851              		.section	.bss.ucFunctionCode.7961,"aw",%nobits
 852              		.set	.LANCHOR10,. + 0
 855              	ucFunctionCode.7961:
 856 0000 00       		.space	1
 857              		.section	.bss.ucMBAddress,"aw",%nobits
 858              		.set	.LANCHOR0,. + 0
 861              	ucMBAddress:
 862 0000 00       		.space	1
 863              		.section	.bss.ucMBFrame.7959,"aw",%nobits
 864              		.align	2
 865              		.set	.LANCHOR8,. + 0
 868              	ucMBFrame.7959:
 869 0000 00000000 		.space	4
 870              		.section	.bss.ucRcvAddress.7960,"aw",%nobits
 871              		.set	.LANCHOR9,. + 0
 874              	ucRcvAddress.7960:
 875 0000 00       		.space	1
 876              		.section	.bss.usLength.7962,"aw",%nobits
 877              		.align	1
 878              		.set	.LANCHOR7,. + 0
 881              	usLength.7962:
 882 0000 0000     		.space	2
 883              		.section	.data.eMBState,"aw"
 884              		.set	.LANCHOR6,. + 0
 887              	eMBState:
 888 0000 02       		.byte	2
 889              		.section	.data.xFuncHandlers,"aw"
 890              		.align	2
 893              	xFuncHandlers:
 894 0000 11       		.byte	17
 895 0001 000000   		.space	3
 896 0004 00000000 		.word	eMBFuncReportSlaveID
 897 0008 04       		.byte	4
 898 0009 000000   		.space	3
 899 000c 00000000 		.word	eMBFuncReadInputRegister
 900 0010 03       		.byte	3
 901 0011 000000   		.space	3
 902 0014 00000000 		.word	eMBFuncReadHoldingRegister
 903 0018 10       		.byte	16
 904 0019 000000   		.space	3
 905 001c 00000000 		.word	eMBFuncWriteMultipleHoldingRegister
 906 0020 06       		.byte	6
 907 0021 000000   		.space	3
 908 0024 00000000 		.word	eMBFuncWriteHoldingRegister
 909 0028 17       		.byte	23
 910 0029 000000   		.space	3
 911 002c 00000000 		.word	eMBFuncReadWriteMultipleHoldingRegister
 912 0030 01       		.byte	1
 913 0031 000000   		.space	3
 914 0034 00000000 		.word	eMBFuncReadCoils
ARM GAS  /tmp/cc53Pg4v.s 			page 27


 915 0038 05       		.byte	5
 916 0039 000000   		.space	3
 917 003c 00000000 		.word	eMBFuncWriteCoil
 918 0040 0F       		.byte	15
 919 0041 000000   		.space	3
 920 0044 00000000 		.word	eMBFuncWriteMultipleCoils
 921 0048 02       		.byte	2
 922 0049 000000   		.space	3
 923 004c 00000000 		.word	eMBFuncReadDiscreteInputs
 924 0050 00000000 		.space	48
 924      00000000 
 924      00000000 
 924      00000000 
 924      00000000 
 925              		.text
 926              	.Letext0:
 927              		.file 3 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/machine/_default_types.h"
 928              		.file 4 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/lock.h"
 929              		.file 5 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_types.h"
 930              		.file 6 "/opt/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi/8.2.1/include/stddef.h"
 931              		.file 7 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/reent.h"
 932              		.file 8 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/stdlib.h"
 933              		.file 9 "/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_stdint.h"
 934              		.file 10 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 935              		.file 11 "modbus/port/port.h"
 936              		.file 12 "modbus/include/mbport.h"
 937              		.file 13 "modbus/include/mbproto.h"
 938              		.file 14 "modbus/include/mb.h"
 939              		.file 15 "modbus/include/mbframe.h"
 940              		.file 16 "modbus/rtu/mbrtu.h"
ARM GAS  /tmp/cc53Pg4v.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mb.c
     /tmp/cc53Pg4v.s:16     .text.eMBInit:0000000000000000 $t
     /tmp/cc53Pg4v.s:24     .text.eMBInit:0000000000000000 eMBInit
     /tmp/cc53Pg4v.s:162    .text.eMBInit:0000000000000074 $d
                            *COM*:0000000000000004 pxMBFrameCBByteReceived
                            *COM*:0000000000000004 pxMBFrameCBTransmitterEmpty
                            *COM*:0000000000000004 pxMBPortCBTimerExpired
     /tmp/cc53Pg4v.s:183    .text.eMBRegisterCB:0000000000000000 $t
     /tmp/cc53Pg4v.s:190    .text.eMBRegisterCB:0000000000000000 eMBRegisterCB
     /tmp/cc53Pg4v.s:361    .text.eMBRegisterCB:000000000000006c $d
     /tmp/cc53Pg4v.s:893    .data.xFuncHandlers:0000000000000000 xFuncHandlers
     /tmp/cc53Pg4v.s:366    .text.eMBClose:0000000000000000 $t
     /tmp/cc53Pg4v.s:373    .text.eMBClose:0000000000000000 eMBClose
     /tmp/cc53Pg4v.s:422    .text.eMBClose:0000000000000020 $d
     /tmp/cc53Pg4v.s:428    .text.eMBEnable:0000000000000000 $t
     /tmp/cc53Pg4v.s:435    .text.eMBEnable:0000000000000000 eMBEnable
     /tmp/cc53Pg4v.s:481    .text.eMBEnable:0000000000000020 $d
     /tmp/cc53Pg4v.s:487    .text.eMBDisable:0000000000000000 $t
     /tmp/cc53Pg4v.s:494    .text.eMBDisable:0000000000000000 eMBDisable
     /tmp/cc53Pg4v.s:549    .text.eMBDisable:0000000000000028 $d
     /tmp/cc53Pg4v.s:555    .text.eMBPoll:0000000000000000 $t
     /tmp/cc53Pg4v.s:562    .text.eMBPoll:0000000000000000 eMBPoll
     /tmp/cc53Pg4v.s:792    .text.eMBPoll:00000000000000e0 $d
                            *COM*:0000000000000004 pxMBFrameCBTransmitFSMCur
                            *COM*:0000000000000004 pxMBFrameCBReceiveFSMCur
     /tmp/cc53Pg4v.s:814    .bss.eException.7963:0000000000000000 eException.7963
     /tmp/cc53Pg4v.s:815    .bss.eException.7963:0000000000000000 $d
     /tmp/cc53Pg4v.s:817    .bss.peMBFrameReceiveCur:0000000000000000 $d
     /tmp/cc53Pg4v.s:821    .bss.peMBFrameReceiveCur:0000000000000000 peMBFrameReceiveCur
     /tmp/cc53Pg4v.s:824    .bss.peMBFrameSendCur:0000000000000000 $d
     /tmp/cc53Pg4v.s:828    .bss.peMBFrameSendCur:0000000000000000 peMBFrameSendCur
     /tmp/cc53Pg4v.s:831    .bss.pvMBFrameCloseCur:0000000000000000 $d
     /tmp/cc53Pg4v.s:835    .bss.pvMBFrameCloseCur:0000000000000000 pvMBFrameCloseCur
     /tmp/cc53Pg4v.s:838    .bss.pvMBFrameStartCur:0000000000000000 $d
     /tmp/cc53Pg4v.s:842    .bss.pvMBFrameStartCur:0000000000000000 pvMBFrameStartCur
     /tmp/cc53Pg4v.s:845    .bss.pvMBFrameStopCur:0000000000000000 $d
     /tmp/cc53Pg4v.s:849    .bss.pvMBFrameStopCur:0000000000000000 pvMBFrameStopCur
     /tmp/cc53Pg4v.s:855    .bss.ucFunctionCode.7961:0000000000000000 ucFunctionCode.7961
     /tmp/cc53Pg4v.s:856    .bss.ucFunctionCode.7961:0000000000000000 $d
     /tmp/cc53Pg4v.s:861    .bss.ucMBAddress:0000000000000000 ucMBAddress
     /tmp/cc53Pg4v.s:862    .bss.ucMBAddress:0000000000000000 $d
     /tmp/cc53Pg4v.s:864    .bss.ucMBFrame.7959:0000000000000000 $d
     /tmp/cc53Pg4v.s:868    .bss.ucMBFrame.7959:0000000000000000 ucMBFrame.7959
     /tmp/cc53Pg4v.s:874    .bss.ucRcvAddress.7960:0000000000000000 ucRcvAddress.7960
     /tmp/cc53Pg4v.s:875    .bss.ucRcvAddress.7960:0000000000000000 $d
     /tmp/cc53Pg4v.s:877    .bss.usLength.7962:0000000000000000 $d
     /tmp/cc53Pg4v.s:881    .bss.usLength.7962:0000000000000000 usLength.7962
     /tmp/cc53Pg4v.s:887    .data.eMBState:0000000000000000 eMBState
     /tmp/cc53Pg4v.s:890    .data.xFuncHandlers:0000000000000000 $d

UNDEFINED SYMBOLS
eMBRTUInit
xMBPortEventInit
eMBRTUStart
eMBRTUStop
eMBRTUSend
ARM GAS  /tmp/cc53Pg4v.s 			page 29


eMBRTUReceive
xMBRTUReceiveFSM
xMBRTUTransmitFSM
xMBRTUTimerT35Expired
xMBPortEventGet
xMBPortEventPost
eMBFuncReportSlaveID
eMBFuncReadInputRegister
eMBFuncReadHoldingRegister
eMBFuncWriteMultipleHoldingRegister
eMBFuncWriteHoldingRegister
eMBFuncReadWriteMultipleHoldingRegister
eMBFuncReadCoils
eMBFuncWriteCoil
eMBFuncWriteMultipleCoils
eMBFuncReadDiscreteInputs
